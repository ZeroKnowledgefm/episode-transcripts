Anna Rose [00:05] Welcome to Zero Knowledge. I'm your host, Anna Rose. In this podcast, we will be exploring the latest in zero-knowledge research and the decentralized web, as well as new paradigms that promise to change the way we interact and transact online.


This week I chat with Jeffrey Scholz, founder of RareSkills. We talk about onboarding developers into ZK, the approach they have taken with their ZK Book and Bootcamp on ZK. How to strip down a complicated topic into its parts, what to start with, what can be introduced later, the choices of what to teach and which tools to use, as well as how to best teach people effectively, to teach them enough so that they can teach themselves going forward.


Now, before we kick off, I do want to just let you know about the zkSummit. zkSummit13 is coming up. It's happening on May 12th in Toronto. This is the second time we bring the zkSummit to North America, the first being all the way back in 2019 when we did one in San Francisco. If you've never been to a zkSummit, I definitely recommend checking it out. This is the spot to find out about the latest research, the newest applications, to find out who are the most important players in ZK today. It's also a wonderful way to get to know the larger ZK community.


The application to attend is now open. If you'd like to apply to speak, you can do so in the same form. The speaker application deadline is March 15th. Generally, I recommend applying early. We do expect this event to sell out and tickets are limited. Speaker slots are even more limited. So do get your application in early and we'll get in touch with you very shortly. Links, as always, are in the show notes and I hope to see you there.


Now Tanya will share a little bit about this week's sponsor.


Tanya [02:00] You might already know of the ZK Jobs Board, a place where teams can share open roles with our community. But when it comes to key hires, finding the right fit in our niche space can be difficult. That's where Missing Link comes in. They're a talent team built for the Web3 era, helping projects across the ecosystem connect with the right candidates at the right time. They've worked with names you'll recognize, Ethereum Foundation, Matter Labs, Lido, Mina, Web3 Foundation, and many more, filling critical roles that drive these teams forward. Whether you're an established project looking to fill a senior leadership role, or a startup searching for specialized talent to refine your product market fit, Missing Link can help. They've done it for some of the biggest teams in the space helping them. And now you find the right people fast. For more details, check out the show notes and visit their website at missing-link.io. So, thanks again, Missing Link.


And now, here's our episode.


Anna Rose [03:03] Today, I'm here with Jeffrey Scholz, founder of RareSkills. Welcome to the show.


Jeffrey Scholz [03:08] Thanks for having me.


Anna Rose [03:09] Today we are going to be diving into ZK education, something that is near and dear to my own heart. As you may know, there's a project called ZK Hack. It's a sister project to this show, to the Zero Knowledge Podcast. And over at ZK Hack, we have the ZK Whiteboard Sessions, we have study groups, and we do sort of a form of informal education. But there is no curriculum, it's not really designed with end goals in sight. But this has made me a little bit curious about generally ZK education. And I think this is something we're going to be talking about in this episode. RareSkills, Jeffrey, what you've been working on is very much that. So I really want to explore how you think about ZK education.


Now, I hadn't been really aware of your group until 2023, I think, when there was the ZK Book that came out. I am curious, what were you doing before that? What led you to even start working on ZK education? Were you educating before that? So why don't we start a little bit with a backstory of RareSkills? Where did you guys get your start?


Jeffrey Scholz [04:10] So RareSkills didn't start off with ZK. We started off with Solidity because I had been already publishing some material on it under my own personal name on Medium, and I had created a Udemy course on it, which I'll talk about later. But when you're in Web3, ZK comes up a lot. And there was a lot of -- I was personally curious about it. There were a lot of people who wanted to learn about it.


In particular, I had one guy -- I had been talking about, hey, we should have a ZK Bootcamp. This stuff, we should break this down for people. I should share what I've learned on the topic. Luckily, there was one very pushy person who insisted on it, and we created the ZK Bootcamp, which initially started off with just three people. And the lecture notes became the ZK Book, and it was quite popular. So that's what led to us continuing to develop the ZK Book and keep running ZK Bootcamps and just keep investing in education and that in general.


Anna Rose [04:59] Cool. Before the ZK Book, though, were you doing something else in terms of education? Was there another field?


Jeffrey Scholz [05:08] With RareSkills, we were only doing Solidity-related things before that.


Anna Rose [05:11] Got it.


Jeffrey Scholz [05:11] So there wasn't as much material on that back then. So that was kind of the niche we were filling in. But ZK is a -- besides people wanting it, it's a very interesting subject, and it definitely had and still kind of has a very strong mystique around it. So that made it even more interesting.


Anna Rose [05:28] Well, before we dive into just generally this course and RareSkills, we should also learn a little bit about you, like where are you coming from to be even kind of teaching this stuff in the first place?


Jeffrey Scholz [05:40] I got extremely lucky, I would say, because in graduate school I studied computational theory, which is a lot closer to ZK than you would think. So I mean, I did study cryptography and things like that. But ZK is largely about proving that you carried out a computation correctly, right? But what does a computation even mean? And what's the language of a computation? So I think that's something that a lot of people get confused about with ZK because they look at Circom and think, oh, I'm trying to prove I did addition and multiplication. Well, most real computations are not addition and multiplication. So that's not actually how Circom is being used. It's just, you're building a set of constraints that, when they're satisfied, model the algorithm.


So dealing with stuff around circuits and constraints is already stuff I had dove pretty deeply into from an academic perspective. So a lot of the stuff that goes into ZK I had a lot of the prerequisites for already. There was just a huge amount of luck with that. I don't know how else to say that. So that was -- I was -- I graduated in 2015 and I was doing blockchain on and off since then. I was aware of -- I think Zcash definitely caught my attention back in the day, but I did not understand how it worked.


So I worked for Yahoo full-time as a engineering manager. That's actually where I would say a good chunk of education came in is because I really believed in upskilling my team. It's much easier to upskill good people than it is to -- it's risky to hire people, right? You don't know if they have a good motivation and you don't know if they're talented or not. Engineers like it if you upskill them. So that also helps with retention because it's hypercompetitive to retain a team and at the more high levels of tech.


So I wouldn't say that, like launched an educational career there, but I moved to -- so I was living in America at the time. I moved to Asia in 2021 and couldn't -- I was working for Yahoo and I couldn't keep doing that as a manager because your job is basically to sit in meetings. And so glad, I got started in blockchain, worked on a project that didn't end up launching. But this was in 2021 when the gas prices on Ethereum were really horrible.


Anna Rose [07:39] Yeah.


Jeffrey Scholz [07:39] I spent a lot of time trying to figure out gas optimization, which there was no material on it back then. So I wrote a lot of Medium articles on it, and actually created a Udemy course, which became a bestseller within like two weeks.


Anna Rose [07:49] Wow.


Jeffrey Scholz [07:50] And that was kind of a -- I definitely recognize that it's not natural to be that successful that quickly. So that was a strong signal that education was probably maybe a natural strength that I should lean into.


Anna Rose [08:02] Interesting. At the time, 2021-2022, in the Ethereum land, what was there for education? What could people already do? Like there was the Cryptography 101 from Dan Boneh, but that's not Ethereum focused. There was the ETHGlobal events, where you could build things, and you would have had workshops and stuff like that. But yeah, what did exist.


Jeffrey Scholz [08:24] Most of my learning was either reading -- was reading the yellow paper, and then writing code that would kind of test if I understood it correctly. Yeah, there really wasn't much education, at least not beyond like, okay, here's how you build an ERC-20 contract or something like that.


Anna Rose [08:39] Were there no Solidity bootcamps and stuff like that in 2021?


Jeffrey Scholz [08:42] Consensys had one in 2021, I believe.


Anna Rose [08:45] Okay.


Jeffrey Scholz [08:47] And Encode Club had been running some education for some time. But the introductory stuff, it's not that hard to learn. Right? But if you're really trying to, at least back then, trying to get into the intricacies of how the EVM prices things, then there was definitely no material for that.


Anna Rose [09:02] Got it. Okay. So that's where you started to realize this might be a path. When did you found RareSkills?


Jeffrey Scholz [09:10] September 2022.


Anna Rose [09:12] And what was the first thing you did with it?


Jeffrey Scholz [09:14] Because of the materials I had been publishing already, I kind of already had a personal brand and an audience. So it wasn't that hard to get classes going. This whole post, like, a brain teaser that's Solidity-based or a CTF on Twitter, I like to think that we innovated that because I didn't see anyone doing that before, and that because nobody else was doing, that brought a lot of attention to us. And some we didn't call them KOLs back then, but engineering KOLs were engaging with --


Anna Rose [09:43] Thought leaders.


Jeffrey Scholz [09:44] Yeah. Thought leaders were engaging with the problems, and, of course, that boosted our reach significantly.


Anna Rose [09:50] Okay.


Jeffrey Scholz [09:50] Because they want to show, hey, look, my audience, I can solve this problem that you may have seen already. And then that massively increased their reach. So, I guess, that was a Twitter marketing strategy that ended up working really well.


Anna Rose [10:01] This is 2022.


Jeffrey Scholz [10:03] Yeah. 2022.


Anna Rose [10:03] And it was a Solidity-based CTF kind of thing?


Jeffrey Scholz [10:06] Yeah. All of them were. Yeah.


Anna Rose [10:07] Okay.


Jeffrey Scholz [10:07] So of course, when you're running a company, you always publish blogs because of SEO and whatever, but that actually kind of turned into the core feature of the company over time. In fact, I think of us more of as a content company than a training company, especially that we're now starting to do partnerships with these other platforms and creating content for them, so.


Anna Rose [10:27] Cool.


Jeffrey Scholz [10:27] That's starting to take up a big part of our business relative to training. And we really put a lot of thought into, okay, are we writing something that's really providing value for people? Because it's easy, like, okay, I'm going to look at what people are Googling for, I'm going to match the headers and things like that, in order to target it. Well, initially when we were writing about stuff that, obviously, I started that way, and we were writing about stuff that wasn't covered, and people really appreciate that. Because people were Googling for things that there weren't answers for.


So I think that's one thing that kind of kicked us off as a content company. But over time, I would say we really put a lot of effort into making sure that the writing was good. That was -- and what goes into making good writing is, ultimately, people get value from writing because you save them time. That's really fundamentally what it boils down to. Because you don't need education. Just read the source code, right?


Anna Rose [11:18] Yeah, yeah. But if it's hard to read that or if it's -- because, like you look at ZK research or whatever, a lot of early ZK research was all these papers, academic papers, which didn't really handhold very well, and they didn't define things. And so, it's relying on a lot of assumed understanding, and someone trying to learn ZK from scratch, they were lacking like the early works, almost, to like lead them to this, or those defining just definitions.


I mean, more recently, Nico, who's a sometimes co-host of this show, created the ZK Jargon Decoder, and this was just such a game changer for people that, like it's just definitions of words that are used all the time. But if you are trying to learn ZK from a research paper, that is not going to be defined for you. It's going to be assumed that you know it. And I'm guessing in like, generally in blockchain, Solidity, a lot of this stuff is happening in the same way.


Jeffrey Scholz [12:14] Yep. You have to be very conscientious of -- like, you know, in games there's like this skill tree where you learn a skill and it unlocks other skills, blah, blah, blah, right? I would say for good education, you have to be very hyper-aware of what the prerequisites are. Like for example, if you're, let's say you're talking about how to bake bread or something like that. People are not really concerned about what's the air pressure like and the local temperature and is the bread rising enough? Did I even mix the ratio correctly or something like that? So it's really easy when you're deep in a subject to kind of -- you start to have an intuitive knowledge about what the fundamentals are.


Anna Rose [12:45] Yes.


Jeffrey Scholz [12:45] But the person you're talking to doesn't share that context. You really have to be opinionated about what you think the reader already knows. And the other thing that I see a lot of ZK papers do wrong is when you're learning something new, you need to learn it -- see it from a few angles, and you need to be able to relate it to something that you already know.


For example, I see some ZK education. We define a group as a set with a binary operator, with these four properties: identities, inverse, blah, blah, blah, existence of an inverse, and so forth. If that's the first time someone's seeing that, there's no way that they can make any sense out of that, right? So the trouble is, once you already know, like say what a group is, it's kind of hard to not know it. And it becomes so obvious to you that you can't explain it to another person. That's, I think, one thing that can make writing well a challenge is that you have to translate your intuition into the English language.


I'm not like a brain scientist or something like that, but I have a strong suspicion that intuition is not inherently verbal. So trying to make that translation is challenging. And it takes time, and I don't think it can be done in one shot. So it takes a few iterations to see, okay, this article actually reflects the knowledge that's encoded in my brain, and is adjacent to what the reader -- what I think the reader already knows.


Anna Rose [14:02] I think it's also -- there's another point maybe here is that, like, the information that you have, it's also things are changing really rapidly around you. Maybe with Solidity less so, but with ZK, it's like since 2022, it's been changing quite rapidly. And so, even if there is an intuition on how to do this right, or what the sort of trajectory of research is, you can be surprised. So you have to be sort of nimble at the same time, right?


Jeffrey Scholz [14:29] Yes. Actually, that's one thing that we still only teach -- for our bootcamp, we only teach the Groth16 algorithm because what you describe is right. Like the stuff that's actually used is quite complex and changing very fast. But I definitely believe that what we call advancements in any particular field is really just a rearrangement of the fundamentals. Because at the end of the day, most ZK algorithms are polynomials, elliptic curves if they're SNARKs and some kind of commitment ---


Anna Rose [14:59] Hash based?


Jeffrey Scholz [15:00] Yeah, right. Maybe it's hash -- there could be hashes if it's STARK. So you're just kind of starting with the same building blocks and shuffling them around. Right? So, okay, like permutation argument is -- we can use it for lookups. Really cool. But if you boil it down to its things, as someone just did some algebra to prove that a certain property applies, and you are taking advantage of the Schwartz–Zippel lemma, which kind of appears everywhere. So if we just really focus on what those atoms are that are being used everywhere -- because the way I think to teach a complicated subject is to really break down what are the requisite skills that are involved in that, and then bring it all together at the end.


Anna Rose [15:42] Amazing.


Jeffrey Scholz [15:43] So that's why our book is structured -- we spend an entire chapter talking about groups, like two or three chapters talking about elliptic curves. Because if you're seeing it for the first time, you need to spend the entire article seeing it from a few angles, looking at a lot of examples until you really kind of internalize it, and then maybe work out a few practice problems at the end.


Because to understand a polynomial commitment scheme, you need to understand polynomials and you need to understand elliptic curves, if you're doing something SNARK based. So if someone's seeing the Schwartz–Zippel lemma for the first time and elliptic curves point arithmetic for the first time, and that's just way too overwhelming, unless this person has a lot of background in math. So I think it's really key to really drill down the, what are the components of the knowledge? If something is too difficult, that means you need to further break it into components. And I think that can be done way more times than a lot of educators realize, right? 


Anna Rose [16:33] Interesting.


Jeffrey Scholz [16:34] Yeah. So like with groups, okay, groups depend on sets. Binary operator is just a subset of the Cartesian product. So you can keep, like merge sort, you can keep recursively breaking things apart, and you should try to do that -- you should err on the side of doing that more than not, I would say.


Anna Rose [16:49] Let's talk about how the ZK Book came together. You released it in 2023, but I'm assuming this took you a lot longer than that.


Jeffrey Scholz [16:58] Yep.


Anna Rose [16:59] In 2022 -- so you've already sort of given us a bit of a hint about the book. So you've just -- you've chosen, you chose at that time to focus on Groth16, which I think was the right choice. Still, I believe it's the most used proving system. So it has quite a few variations. There's different implementations for Groth16, so engineers using one may -- as far as I understand, it's not a totally standardized proving system, but it's the most common. And I guess depending on what level you're playing with it, it might be a good starting point. So you chose in 2022 to do Groth16. But tell me, where do you start teaching something like Groth16? And actually, I am curious about the ZK Book. At what level are you teaching it? Is it for an engineer, is it for a cryptographer, is it theoretical, or is it hands-on?


Jeffrey Scholz [17:53] So in terms of picking Groth16, well, one thing I learned from Tornado Cash was kind of a code base that I would wrestle with until I really understood. And there was a lot of reference implementation, so that helps a lot. But the target audience is a senior engineer who has no experience with cryptography. So the North Star is very clear. We want to code Groth16 from scratch and understand what we're doing. 


In terms of how to break it down, let's say, we're teaching people how a hash function works. Well, a hash function is really just a bunch of XORs, bit shifts, maybe a permutation somewhere or something like that. So it's really just a matter of what are all of the unfamiliar components that people are dealing with in Groth16, and then break that down -- breaking it down into the atomics. Okay. So there's pairings, there's elliptic curves, there's QAPs and R1CS. Well, the paper doesn't talk about rank-1 constraint systems, but a lot of people do, so we talk about that. Then there's a trusted setup.


Anna Rose [18:48] Oh yeah.


Jeffrey Scholz [18:48] Then there's the verification code, which if you look at it and you know, Tornado Cash or whatever Circom spits out, it's somewhat straightforward, but you want to understand everything that's going on to there, which is largely calling the pre-compiles on Ethereum for elliptic curve addition, multiplication and pairing. So those are things you really want to understand. How do you interface with those pre-compiles? And why are we even using them in the first place?


So originally -- because ZK Book has actually gone through a second edition, so in the first edition, it was, okay, we start with a rank-1 constraint system, rank-1 constraint system becomes a QAP. And then the QAP you can -- can be run on a trusted setup, because the QAP is just one big polynomial equation at the end.


Anna Rose [19:31] Can you say again what QAP is?


Jeffrey Scholz [19:33] Oh, sorry. Quadratic Arithmetic Program.


Anna Rose [19:35] Okay.


Jeffrey Scholz [19:36] Thank you. I'm always used to just -- see, this is the thing I'm talking about. It's in your head.


Anna Rose [19:42] Even I work with this, and I actually didn't recognize that acronym.


Jeffrey Scholz [19:47] Totally. And then how to run that on an elliptic curve. It's evaluated at two at least elliptic curve points. Now, a quadratic arithmetic program boils down to three terms at the end. So you're left with three elliptic curve points. If you pair the first two, you should end up with the third one when you pair it with the generator of the other group for that one.


Okay. But if someone just gives you three elliptic curve points and say, hey, look, one pairs to the other, that's not good enough. You could have just given me any three points, whatever. So we use that as a motivation for why does Groth16 have these other terms like alpha, beta, gamma and delta. And now to understand elliptic curves -- because we actually taught elliptic curve cryptography at least a little bit in our Solidity bootcamp. And something I observed, this is something I would tell everybody going into it, nobody ever learns elliptic curves after a week. It never happens. 


And I've actually have hard evidence to back that up. So I was thinking, so if someone's reading this from a book perspective, they're not going to learn it after one chapter. I had to really think about what's the right way to package elliptic curves so that they're understandable. Because fundamentally they're actually not that complex. It's just the simple algebra equation that you can draw a line through and then solve for where it intersects. But trying to do algebra in your head like that is a nightmare.


And that's when I realized presenting this as a group is a lot simpler. Because even though groups are -- most engineers have not done group theory before. But it lets you treat these things kind of like a polymorphism in object-oriented programming, or like an interface where you don't have to know what's going on under the hood. You just say it's going to implement these functions which have these properties, and you don't have to worry about what's going on under the hood.


But in order to understand that interface, you want to understand what a group is. And then since most people haven't encountered groups before, they need to relate it to sets, which I think most engineers at least have a vague idea of what a set is. Going from sets to groups and then from groups to elliptic curves was kind of, here is how I can keep breaking it down until I'm close to what I think the engineer knows already. And then that happens over the course of four or five chapters or so, which, if you try to teach it in one chapter, it's just not going to work. And I've gone back and forth with people where I have unlimited information bandwidth, and I can't do it in one setting. So trying to do it in one chapter is just silly. So that is how it evolved that way.


And honestly, this is something I'm really proud of because there's a lot of ZK tutorials that have come out since we published that, where, hey, sets, groups. And like, no, we --


Anna Rose [22:13] You pioneered that.


Jeffrey Scholz [22:14] That was our idea to break it down that way. And then with pairings, pairings are very scary. So the decision that I made there is we're not going to teach how pairings work under the hood, because even Vitalik has a hard time understanding them. But if we can treat them like a black box, like engineers use hash functions without knowing how they work, no problem. So how can I try to present it in that manner? Not knowing how a hash function works doesn't mean you don't know its properties, right?


Anna Rose [22:38] Yeah.


Jeffrey Scholz [22:38] Okay. It's pseudorandom on the output, it's collision resistant, yada yada. But how are we going to try to approach this for pairing? Well, we've already built up a lot of intuition around groups. Okay, it's not really a group, but can we relate it to that in a way where it doesn't feel like such a huge leap to people. And that is, I would say, a general teaching philosophy. Sorry, I'm going off for a long time. I'll wrap this up, here. Is, if something's hard to explain, let's say you're trying to teach topic X. Let's say if you could make them magically know topic Y such that topic X suddenly becomes trivial, what is topic Y?


Anna Rose [23:11] Or what's similar to topic Y that they might be able to grok the concept?


Jeffrey Scholz [23:17] Exactly. Yeah. If someone already understands homomorphic encryption, for example, then elliptic curves don't seem as strange, because they do have some of the properties there. So if you're able to relate to that, then people can grasp it more quickly. So just really try to avoid excessively massive leaps and just bring people incrementally closer to what they're looking for. Which is why the ZK Book is somewhat long. It's about -- when we first published, it was about 50 or 60,000 words or something like that. But you could describe Groth16 on one page. It's not, at the end of the day, a complex algorithm.


The thing, it just relies on things that are unfamiliar to most people. Most people don't know pairings in elliptic curves and the notion of a quadratic arithmetic program. Why are you even using that? Even though it can be expressed mathematically and a high schooler could understand. But why? So explaining those whys so that it's not just "trust me, bro, write the code." That's not what people are really wanting. That whole thought process is how the ZK Book evolved into its current form.


The second edition was, I realized there was a lot of stuff around polynomials that was not broken down enough. So I felt, okay, Schwartz–Zippel lemma is so easy to understand. I can just leave that as like a mini section inside of the discussion about quadratic arithmetic programs. But when we actually taught the bootcamp, I realized, wait, people are --


Anna Rose [24:36] Stuck on this.


Jeffrey Scholz [24:36] Not getting the quadratic arithmetic program as quickly as I would think they would.


Anna Rose [24:40] Okay. You evolved it.


Jeffrey Scholz [24:42] Yeah. Okay. We need to spend more time thinking about how can we represent vectors as polynomials? Because that's basically what a quadratic arithmetic program is doing. We can't just say, oh, the transformation step is you do Lagrange interpolation on the columns. Let's just spend some time thinking about what does it mean to encode data as a polynomial even in the first place? And then what properties can you rely on? Can you add them together, and then some property is retained? Can you do an equality test quickly or how and why would you do that? So that helped a lot in terms of helping people get their hands dirty with something before they moved on with it.


I mean, one thing that we do, for example, when we're teaching the ZK Bootcamp, is when people are introduced to elliptic curves, I have them implement the ECDSA algorithm, which has very little to do with ZK. But why? Because people need time to wrestle with elliptic curves before they're comfortable with it. And if you're stuck on ECDSA, there's a ton of resources online that will help you. And nowadays, ChatGPT can probably one shot it.


So that -- now you're getting an environment where you're able to get feedback. Because if you jump right into using elliptic curves the way Groth16 does, you're not going to find many resources and when you get stuck, you're going to be very frustrated. But if you've already built up some fluency with elliptic curves, then you go to the next stage of the Groth16 algorithm, it's not so bad. You're not dealing with two things at the same time.


Anna Rose [25:56] Cool. Actually, what you're describing with having learned a lot from the actual bootcamp and then incorporated it into version 2, this sounds a lot like something that's been happening since 2021 over on the ZK Hack Discord. And to our listener, like I'm going to mention this a lot, ZK Hack, and this is sort of the educational portal that I would say we have, very different from RareSkills. I would say way less structured, it's much more kind of makeshift. We do study groups, we kind of -- like we'll have a little 6-week study group on paper, and then wrap it up and then do a different one.


But in that group there's Justin Thaler who's been doing a study group and those are long. He does like multiple months study groups, where he goes through his book and he goes through it like chapter by chapter with a group. Every time he does it, he's learning, and he's been on the show to talk about it, he's actually learned what's not working in some explanation that he's put in here, or what's changed. And so he's updating it. And this sounds somewhat similar like that feedback to a book. I think in a space like this is so important. I think in the past you'd have textbooks created and they'd sort of sit there, and they dominate a way of thinking for a long time. But it's not a luxury that we have today. Things definitely need to evolve.


Jeffrey Scholz [27:13] Yeah. No, having that feedback mechanism in there is nice because we launched the bootcamp slightly before the book, about two months before. So, I mean, the book I had been working on for a long time because those were my notes for the lecture initially. But yeah, it definitely informed that you should not talk about topics in this order, or this explanation is just not going to work for someone new to the topic.


And I think even something I learned is, I had to put a lot of effort into learning Groth16. And the temptation can be as like, I want to share with you everything that I learned. But in reality the value is I need to trim it off. For example, most salient example is abstract algebra. We have groups, rings and fields. So naturally, okay, I'll talk about those things. But then I realized after a few iterations on the bootcamp, you don't really need to know what a ring is in order to really understand how Groth16 works. That's just giving people another hurdle to go over which is not 100% necessary. Now, should they learn that? Eventually, of course. But what we're aiming for is what's the straightest line to get from not knowing it to being able to implement it, and have a really good understanding of what you're doing.


So there was a pretty significant subtractive element that came in after having learned that. And even when I'm editing other people's research for our publications on RareSkills, it's just a very common temptation. Like I put so much effort into understanding this. I just want to tell you about it, but it turns out you don't actually need it. So, which is frustrating. But I think that's a -- if you want to produce good writing, it's just something that you have to accept.


Anna Rose [28:48] I feel like there's a parallel here to gaming and how really good games onboard you well. And one of the things -- and it depends a little bit on the type of learner. I know there's people who really need to learn everything before they do anything that exists. Like they really want to detail, like they want to know everything. I personally don't work that way. I have a tendency to YOLO into something and then figure it out after.


And games that are built that way, where it's like you can already very early on do something, it's so much more fun. And obviously over time, you can up your skills and you can learn a lot more about this world, or whatever the game infrastructure is. But at the beginning, being able to do something is really key. And I think that's what you're talking about here, which is like stripping away some of the stuff which if you wanted to build secure ZK systems in the real world, you do need. But if you are just trying to do something, you don't.


Jeffrey Scholz [29:42] Yep. No. I think that's very important. People need feedback right away about like -- they need to see results to keep their motivation up. I would say 98% of the engineers that I've dealt with match the description of, I don't want to learn everything before I get started. I would say 98% of people will lose motivation if there's too much theory, and that before anything happens. So I do try to, in the ZK Bootcamp and even well in the book too, hey, here's a dummy ZK proof that we can make as early as possible. Now, it has very serious limitations. It's not succinct. There's some edge cases where you can leak information, but technically it's a ZK proof. Oh, okay. Now I kind of -- That is so important. And then when -- people are more motivated to learn the theory after they've seen, okay, I can see -- I kind of already have a framework for where to put things in my brain.


Anna Rose [30:33] What tools are you using with these engineers? So you have the book itself, but is there a DSL that you've chosen? You sort of mentioned Circom. Like, is that what you're building this stuff in?


Jeffrey Scholz [30:44] The ZK Bootcamp, talking about the backend. So assuming you already have Circom, how do you proof that? So that compiles to a rank-1 constraint system, right? Now, how do you create a proof for that? So that -- 


Anna Rose [30:57] So this is lower on the stack then, and you're not using Circom, you're like working behind Circom. Would you use anything like Arkworks or also not?


Jeffrey Scholz [31:05] Well, okay. So we're basically implementing Arkworks in Python, essentially. That's what the --


Anna Rose [31:09] Okay. Wow.


Jeffrey Scholz [31:11] Obviously, not a fully production version, but the whole thing like, okay, you're given a rank-1 constraint system. Now you need to run the polynomial interpretation and evaluate the polynomials on elliptic curve points, do the commitments, so forth and so on. That's the stuff that we teach in the class, and that's all done in Python. Rust is way more important to learn if you want to work in ZK, but most people are not that fluent in Rust. So if people are fighting the Rust compiler and learning a new concept at the same time, that's just not going to work.


Anna Rose [31:37] We get so much of this with -- ZK Hack does the CTF around bugs in ZK protocols. And we've heard, especially in the last edition, that more people were annoyed by having to use Rust than anything else. Like, the winners even, they did well, but they were like, Rust is my problem.


Jeffrey Scholz [31:55] Yeah. Rust is definitely -- it needs to be studied on its own, not in parallel with something else. This is something I've gotten feedback on a lot because when people try to learn ZK, oftentimes they, oh, I'm going to try to learn how to program in Circom. But, which is a reasonable thing to do if you were just coming in from the outside. But you don't really understand that you're writing constraints, you're not writing imperative code. And people try to force their imperative code mindset onto Circom, and it just ends up being weird. And they don't understand, okay, why can I not have two multiplications in one constraint? That seems like the most random requirement ever. 


But if you understand that, okay, well, behind the scenes there's a rank-1 constraint system which only has one multiplication per constraint. But why is that? Well, because with a pairing, you can only do one "multiplication." So that just helps things make a lot more sense. And it initially seems random. Why is everything happening in a finite field or with modular arithmetic, that just seems like we can overflow and have a security bug. Why are we doing that? 


Because elliptic curves use finite fields, that's why. Or they form an additive group rather, I should say. And I think we're kind of in the time right now where if you wanted to use Solidity in 2016, you kind of had to know how the EVM works. The abstraction was extremely leaky. And it's better than programming in Assembly, but not a whole lot is hidden from you, and the abstractions are not very good. I would say right now with -- it's definitely made a huge amount of improvements recently. But if you really want to understand ZK, and write with ZK DSLs, then you need to know what's going on behind the scenes.


Anna Rose [33:33] Interesting. So you would kind of compare the ZK DSLs today to Solidity 2016?


Jeffrey Scholz [33:39] Yes.


Anna Rose [33:39] Where Solidity today, I mean, there's lots of people who don't actually pay that much attention to how the EVM works. They're using Solidity plus all of the tooling that's been built up over, what is it? Nine years.


Jeffrey Scholz [33:50] Nine years. Wow. Yeah.


Anna Rose [33:51] Whoa, wait. But then, I mean, ZK DSLs generally as a topic really only became a thing in 2021-2022. I do have a question about that though, because you're saying sort of like you're rebuilding Arkworks in Python to interface potentially with Circom. There are these other DSLs that also kind of live at different parts in the stack. Like have you explored for any of your bootcamps, any other languages? And I realize like you're still going to stick to Python and like recreating this thing, but yeah, just -- or do you interface with any other languages?


Jeffrey Scholz [34:27] No. I mean, well, some people use Solidity just to work with the pre-compiles. Because if you want to -- most people who are taking the ZK Bootcamp come from a smart contract background, so and it's helpful to reference real things, and my favorite thing to reference is the Tornado Cash verifier. So if you can't understand the Tornado Cash verifier with at least not recognizing how to interface with the pre-compiles.


So we will launch a Circom Bootcamp in March, so coming up soon. So that's where we teach the backend as an abstraction. And how do you actually implement the circuits as part of an application? So how do you go from only having addition and multiplication to verifying a zkVM or a traditional cryptographic hash? That's the end goal. So that's how I like to design the courses. What's the outcome, the very tangible outcome, and what's the straightest path to get there?


So for the ZK Bootcamp that we have, the tangible outcome is I want to implement Groth16 from scratch. Now, what's the straightest line to get there without skipping things and making sure people have the prerequisites that we talked about earlier.


So for Circom it's how can I create a zkVM from scratch, and also a cryptographic hash function. Not the ZK friendly ones. I mean like the ones that seem very mysterious for ZK proofs. And what background knowledge needs to go into that in order to actually code that up, and understand what you're doing, and then take the most direct path there. So in that case I don't -- being comprehensive is not a goal of ours. It's very much like, for someone who's new, how do you keep them motivated and get them the most direct pack there and then they can -- there's a lot of ZK education at the relatively high level. I mean, once you're good enough to read the papers, then you don't need us anymore. So we don't need to cover everything. But we need to get you to that point first.


Anna Rose [36:08] Yeah. Interesting.


Jeffrey Scholz [36:08] So, I mean, I feel comfortable and a lot of other people who graduate from our course feel comfortable just picking up a paper and reading it. So that's really what we want to get to people. We don't want to, at the end of the day, be a substitute for the papers. Because there's too much work to just translate everything. But people get to that point by, I know extremely well how this particular algorithm works. Now it's easy for me to learn adjacent things. Like if you already know Python, it's easy to learn Ruby, but learning Python for the first time is quite hard. So we did that for Circom. People ask me like, man, that's an outdated language, why are you doing that? Well , there's a--


Anna Rose [36:37] Yeah. I was about to --


Jeffrey Scholz [36:38] Sure.


Anna Rose [36:39] I was about to ask you why not Noir, but yeah.


Jeffrey Scholz [36:42] Because I think it provides the -- are you familiar with Huff by any chance?


Anna Rose [36:46] I only know it because Zach from Aztec talks about it.


Jeffrey Scholz [36:50] Okay.


Anna Rose [36:50] But I don't actually know what it is.


Jeffrey Scholz [36:52] Sure. Basically, it's the zkEVM -- so the opcodes in the EVM, it's almost one -- it's an assembly language that's almost one-to-one. So if you wanted to write raw opcodes in Solidity, you'd write 0x52, you know, 0x60, blah blah blah. So they turn those into the mnemonics. So push [?] m store, blah blah blah. But then there's some nice sugar coating top of it. Like if you want to do a jump, you don't actually want to remember where in the bytecode am I jumping to, and remember the index. You can just create a marker over there like you do with regular assembly code.


I found that to be probably the most -- not probably, undisputably the most effective way to teach the EVM, because people get their hands dirty with it. And the very roughest edges are sharp, are smoothed off, like having to memorize a jump destination or something like that. But you still deal with what's going on with the stack and what's going on in memory. You still have to tangle directly with that.


So I would say Circom has that advantage where you're dealing really closely with what the constraints are, but the very roughest edges are taken off where you're not literally writing a rank-1 constraint system by hand. So it takes off just the right amount of roughness, but you're still tangling with the core thing. Plus there's a huge ecosystem behind it.


Anna Rose [38:06] That's true. And lots of library. It's been around the longest. Yeah.


Jeffrey Scholz [38:11] So you can look at other established code bases and figure out what's going on, which is not the case for pretty much every other DSL. Like I almost -- I was considering -- I don't know how to say it, gnark from Consensys.


Anna Rose [38:23] gnark.


Jeffrey Scholz [38:24] gnark. Yeah. I think that's a really nicely designed -- it's like Circom, but better. I mean, sure, but it's too new. And there's not a lot of -- besides the Linea, I don't know what to reference for that. If you pick a random Circom library from GitHub, I'm pretty sure it's going to work with the same Circom compiler you install from the Circom website.


Anna Rose [39:22] Okay.


Jeffrey Scholz [39:23] So, I mean, there is an older version of Circom, but I really actually have a hard time finding those code bases anymore. So most of it is up to date in terms of it works. And there's a lot more institutional knowledge around how to audit it, which is not saying much. There's not that many ZK auditors, but still way better than the other ones. And Circom has some things that I don't like. And I think you talk to anyone who's developed with it, they'll tell you they don't like it. But once you can get over those things, then you're really dealing directly with constraints.


And so with a -- like how do you even design a stateful computation with constraints? That's something that really trips people up. Like I can understand, oh, I'm trying to prove I did a multiplication correctly. That just maps directly to multiplication. But how do I prove that I hashed something correctly? Because that's using a bunch of very nonlinear operations.


Now we need to, again, break it down. Well, how do you even represent a stateful computation in the first place? Let's say a factorial with an unknown number of steps in it. So one times two times three times four, blah, blah, blah. But it's going to stop at some unknown point in the future. How do you even do that? Well, the breakdown is you need to have an upper bound on the number of times you would compute the factorial. Let's say you're not going to do anything more than 100 factorial. So your constraints are, I'm going to keep multiplying, and then you have 1 factorial, 2 factorial, 3 factorial blah, blah, at each step.


But now what if someone, I want to know -- 89 factorial. Well, because it's an arithmetic circuit, you still have to go all the way up to 100, but then you need to pick something from at the index 89. Well, how do you "pick things" when you only have addition and multiplication? Well, you can do an inner product with a binary mask. So you just multiply everything by 01 where you want it and 0 in the other places. So that's going to zero out the other things, and you're only left with 89 factorial. And all of that, I described, is done with only addition and multiplication.


Okay. Cool. Now we have a stateful computation. But what if we're doing more than just a single multiplication? Well, we can add another dimension to it. Now we have like, registers, right? And now the state transition between each of those is not as straightforward as a multiplication. But if we keep breaking it down, then we can represent it with our very limited language.


Anna Rose [41:33] And this is something that Circom gives you?


Jeffrey Scholz [41:36] Yes. Well, so the challenge is Circom only gives you addition, multiplication, and a constraint. But the idea is there's design patterns that exist. Like how do you select from an array? How do you do a stateful computation? How do you represent a bit -- let's say you're trying to actually represent a bit shift. Well, you have to do that outside the circuit, and then prove that the bit shift was done correctly. Because at the end of the day, a bit shift, unless you overflow, is multiplication by a power of two. So you can prove that the bit shift was done correctly. You can't directly compute it, but outside of circuit, you compute the bit shift, put the answer back, and then constrain that it was done correctly. So we're going to publish a new part of the ZK Book which talks about how to design these things. The chapter for that is called Compute Then Constrain. Now, the challenge is I know this pattern exists, but there's no word for it that's existing out there.


Anna Rose [42:24] Interesting.


Jeffrey Scholz [42:24] So while designing this Circom education thing, I had to kind of invent a lot of terminology for things that other people are -- I didn't invent the idea. I've definitely seen other people doing them, and doing it repeatedly enough to the point where I think it's a design pattern. But the design pattern doesn't really quite have a name. Yeah, I'm excited about that because I'm not aware of any resource like that out there.


Anna Rose [42:47] You talked a little earlier about content and creating content. This is a bootcamp. How do you actually host a boot -- like, what is it? Is it like a group that meets regularly? Do you do like six weeks? Do you do eight weeks?


Jeffrey Scholz [42:58] Sure.


Anna Rose [42:58] What is it?


Jeffrey Scholz [42:59] So the bootcamps are just video calls with five or ten other people and myself. There's two instructors at the company, myself and another person named João. He lives in Brazil, I live in Asia. So that's great, we have both time zones covered. We teach the class, but I try to avoid just giving people a video lecture because that's -- I could just record myself and then send that. Really try to make it interactive where the instructor's asking people questions. I found that to be the -- level of effectiveness learning by someone asking you questions that push your knowledge boundary versus someone telling you something is not even in the same galaxy.


It's way more effective where someone is discovering things on their own, but they're not really discovering things on their own, because they're going on a guided quest. So the information sticks more, and you don't walk out of the lecture like, oh, everything made sense there, but I can't do anything. Everyone who's gone to college has had that experience where it made so much sense in the lecture, and I can't do the whole thing.


Anna Rose [43:54] But I can't remember anything. Yes.


Jeffrey Scholz [43:57] So when people are paying for it, they don't want edutainment. They want -- I want to actually learn this stuff, which the actual learning experience is more painful. So that is what we do in the bootcamp, and then we give a homework which really enforces the stuff. But if you're looking to learn ZK, you're watching, you're listening to this, you don't have to take our bootcamp. The book covers the same stuff, and it's free, and you can go through it on your own. And a lot of people have. The thing for the ZK Bootcamp is if you really want to accelerate your learning, for some people, time is more valuable than money. So that may be a good deal for people like that who are really like, I need to learn this ZK thing, and it needs to be done by a certain date or something like that.


Anna Rose [44:36] Interesting.


Jeffrey Scholz [44:37] So but we teach the same subject. Everything that we charge, we also provide for free in terms of content.


Anna Rose [44:44] So how many have you actually done?


Jeffrey Scholz [44:46] We've done at least 15 ZK Bootcamps.


Anna Rose [44:49] Wow. Cool.


Jeffrey Scholz [44:50] I don't know the exact number, but at least 15.


Anna Rose [44:53] Nice. That's more than I thought. I thought you'd have done three, but okay, cool.


Jeffrey Scholz [44:59] No. It's been somewhat popular, so.


Anna Rose [45:02] That's nice. The people who've gone through these bootcamps, do you know if they've gone on to work in ZK and if so, kind of at what level?


Jeffrey Scholz [45:08] Oh, for sure. Oh, this is what I'm most proud of. So you know the guy, David Wong, who authored Real World Cryptography? So he's --


Anna Rose [45:15] He's been on the show.


Jeffrey Scholz [45:16] Okay. Great. Yeah. So he runs zkSecurity. And we've had at least two people become interns at his company. One guy is working full time now. So that's actually -- yeah, that was somewhat recent. We've had another and he's still working at Matter Labs, the company behind zkSync. So he is a security engineer, and is now actually doing stuff like writing constraint solvers to make sure that the constraints don't have other cases in them that are insecure, right?


Anna Rose [45:47] Amazing.


Jeffrey Scholz [45:48] Those are probably some of the more cool examples of people who've gone on to work in industry. If you want to do actual ZK research, but you'd kind of need a PhD, and people are not really open to that. But with security, if you can, hey, I can find bugs and things, then people are more lenient about that in terms of hiring you. And then, for people who want to work in ZK, that's something I tell them you should consider that, because we've had quite a bit of success with getting onboarding people to ZK Security. I don't mean the company, I mean in general. Well, also the company.


Anna Rose [46:17] But seemingly, there's a funnel directly there.


Jeffrey Scholz [46:20] So there's definitely quite a bit of need for people who understand how to find bugs in this sort of stuff. And so those are the professional things. But most people who take the course are not looking to get into ZK, actually. It's mostly taken by tech leads and protocol engineers who just want to kind of hedge their career in case things go in a different direction.


Anna Rose [46:39] Oh Interesting.


Jeffrey Scholz [46:40] Yeah, no, no, We've had some high profile people take the course, like the head of research at Ripple and a core engineer at Fantom, which is Sonic now. And I mean, I won't put the individual names on blast, but you can see some famous people if you look at our testimonials page we've taken. So it's really cool for me because some of the people who -- like one guy, so Consensys came out with this tool a long time ago, Mythril for doing static analysis on source code. And I partly taught myself Solidity back in the day by writing some Solidity code and then running it through static analyzers, and seeing what mistakes is it pointing out. Now obviously there can be a false positive, but they pattern match this kind of a mistake for a reason. So let me try to understand it. So the guy who built that tool back in the day, and then he was acquired by Consensys and they maintained it for a while. I indirectly learned quite a bit of Solidity from him.


Anna Rose [47:30] Nice. I wonder if you've been following the emergence of the zkVMs and some of those teams, because in a way the proposal they're making is like you don't need to know ZK at all anymore.


Jeffrey Scholz [47:41] My advice for people is run a non-trivial computation like something slightly more complex than a Fibonacci sequence, maybe involves a few hash functions. For that kind of stuff, if you have a prover network and you're trying to build a blockchain and hardware is not really a problem, then I think that's great. But the marketing definitely incentivizes presenting it as something where everything is fast, and you don't need to worry about it, which probably will be true in the future. But just run some code on your laptop now, just clone their thing and run the unit tests. It's going to take half a day to get through that stuff. And none of these programs are particularly complicated.


Anna Rose [48:16] You feel like it's not there yet.


Jeffrey Scholz [48:18] Definitely not.


Anna Rose [48:18] Okay.


Jeffrey Scholz [48:19] But I think someday it will be. But then when that day comes, somebody has to be developing those tools and somebody has to be auditing them. And I think the very successful engineers know that the, you don't need to know mindset is kind of a loser's one. So that's just to  --


Anna Rose [48:37] I like that.


Jeffrey Scholz [48:40] So from an economic standpoint, yes, you don't want your engineers burdened down by additional work. You want the DevX to be as smooth as possible, blah blah, blah, if you want to scale, but --


Anna Rose [48:48] But you don't want to make it too easy.


Jeffrey Scholz [48:50] Well, sure, I guess there's drawbacks to that. But I mean, let's say use React, for example, right? Any person who's barely even knows what they're doing can create a React app, right? Because you can copy paste things. It's fairly smooth, aside from node modules taking forever to download, everything works pretty well. Right? But if you want to be a senior engineer, then you have to know, and you want to be designing, like architecting things and managing a team, you have to know --


Anna Rose [49:17] You have to get deeper in there.


Jeffrey Scholz [49:18] Right. You're causing the page to refresh every second. That's not good. So abstractions are never perfect. So if you want to be good at your job, you have to know what's going on behind the scenes so that you can avoid the pitfalls. I mean, even Solidity still has leaky abstractions, right? You can't have unbounded eraser. The gas cost can go nuts. And reentrancy is still not abstracted away, for example. So I think more power to people for developing this stuff, but I'm not concerned about it making what we're teaching obsolete, because there's going to always need to be at least a few people who know the core stuff, and the people who even theoretically don't need to know it will benefit a lot from knowing it.


Anna Rose [49:55] Nice. Have you been -- and this is going to be a little bit of a plug for some of the study groups we've done, but have you been paying attention to the other ZK resources out there? For example, the MoonMath Manual, Justin Thaler's book. There's also the SNARG book, which is much more in the research side of things, but it came out, I think, last year. Yeah, I'm just curious, if you produce the ZK Book, are you ever drawing on references from other books, or are you really sticking to your material? Yeah. Are you aware of it?


Jeffrey Scholz [50:28] Yeah. I am aware of the MoonMath Manual and I've read some parts of it. And Justin Thaler, I've heard a lot of good things about him. I skimmed his book at one point, but I haven't really read it. The SNARG book actually did not know about until this call. So --


Anna Rose [50:46] Like is there other material that you're recommending your students see, basically?


Jeffrey Scholz [50:52] That's a good question.


Anna Rose [50:53] I'm hoping you're going to tell them the ZK Whiteboard Sessions, but also understand, if not.


Jeffrey Scholz [50:59] Usually -- okay. So when people are asking for a recommendation and material, they want to say, hey, you taught how Groth16 works. I want to know how STARK or Plonk works.


Anna Rose [51:08] Yeah.


Jeffrey Scholz [51:08] And I usually tell those people, Vitalik's written on it. There's other good blog posts out there. I can show you those blog posts and you can just read a few, and you'll get that. You already know how Groth16 works. So this is not going to be that hard for you. So the MoonMath Manual I have, it's quite a mathematical thing, definitely. Especially compared to ours. So I think if people read the MoonMath Manual after they read the ZK Book, it's probably easier to do it that way. And I've heard a lot of good things about Justin Thaler's thing from my understanding and from my brief skim, it's more theoretically focused, which I think is good to do after you've built a working example of it, like what we teach. In terms of inspiration, there was this Pinocchio series on Medium or some archive thing that appeared a long time ago. So this was called Why and How zk-SNARK Works, by Maksym Petkus.


Anna Rose [52:14] Okay.


Jeffrey Scholz [52:15] So that was a very helpful resource for me when I was getting into ZK. So he taught Pinocchio and I really felt like that was not -- I felt like Groth16 was a better thing to teach because it's actually used and it's actually simpler. Now, understanding the intuition behind Groth16 is harder probably than Pinocchio, but there's fewer moving parts, so there's less to teach. But if you're wanting to learn some of the later stuff, I mean, what I generally tell people is there's a danger in just knowing things for the fun of it. Which is fine as long as you're conscious that this is a -- that I'm learning things for the fun of it.


But as an engineer or an auditor, you need to actually produce something. That's why we try to set our North Star for the courses. Like you need to produce the Groth16 algorithm, you need to create the zkVM, and then use any resource that's going to help you get to that destination. So whether that's reading the source code, reading the paper, reading other people's blog posts about it. Now, I do think understanding other things at a high level can be helpful. I watched some of the ZK Whiteboard stuff, and it's good to know, okay, at least structurally, this is how things are. Because if I understand the high level, it's easy to start with a high level idea, and then work your way down. Or understand the high level idea, and then learn something that's adjacent to it.


Yeah. My advice for people -- I mean, just in general, for people who are just going out there and learning, try to filter it through, am I learning a skill that somebody else will pay for? Not knowledge. Like even in academia, you're not paid on the basis of being smart or whatever. You're paid on the basis of publishing papers at the end of the day. So you want to make sure that when you're learning something, what additional skill or tangible outcome am I getting from this? Not just, oh, I feel good about myself because I understand how something works. That can be a dangerous feedback mechanism. Now if you're doing it for fun, that's okay. But just be aware that you're doing it for fun.


Anna Rose [54:12] What I hear from you is this idea of just adding value. Like make sure -- you're doing that in a way with the course. You're making sure that there's a value add. It's not just here's a video, enjoy. But it is like hands-on, kind of keeping people accountable, bringing them together, and making sure that people leave with the understanding they're supposed to have. I like that.


And actually, so it's interesting, like I'm going to bring back ZK Hack, but on our side, we've done the content production, but it is the study groups where we've gone through the content, which in my opinion is like the closest thing we've got to it, which are these study groups. But like I said, quite informal. What I hear from you is there's sort of this -- you're trying to create value. You want to make sure that people walk away with value. Like I'm also learning from you, by the way. I am slightly like trying to learn how you're doing this because I think, yeah, we're always looking to make our site a bit better too, but creating these environments where there's enough of a back and forth that it keeps people involved.


Like another thing you mentioned was shaving off those hard edges or those like -- they could be really interesting rabbit holes, but they're going to slow you down situations. Making sure that there's like a streamline from where you're starting with very little info into building something real. You've kind of talked about choosing a proving system that also like, is quite accepted. There is a lot of information about it. And not getting -- like what I hear from that too is you're not getting caught up or confused by all that's out there.


Because I think that's one of the challenges as well is like if you just look around, there's so much you could dive into, but each one of those things will have nuances, and if you don't know the basics, it's going to be really hard for you to navigate between them, and it could confuse you. I'm sure it confuses -- like as a non-developer, talking about all this stuff, I've definitely confused myself on that.


So this is interesting. This is some cool feedback, I think for anyone who's listening, who wants to learn, if they have sort of a journey they'd like to take, these might be good tips. And then, I guess, they could also join you guys. Are you doing another bootcamps at some point soon?


Jeffrey Scholz [56:16] Yeah. We tend to run the ZK Bootcamp every month, so it should --


Anna Rose [56:22] Okay. That's why you do so many. Got it.


Jeffrey Scholz [56:25] I don't know the exact start date of the next one, but it's on our rareskills.io/zk-bootcamp. The start date will be there. There should be one in March.


Anna Rose [56:34] I think this is fantastic for our audience to know. Yeah. Thank you so much for sharing this with us. Now, I do want to ask you one more thing, which is kind of off topic before we sign off.


Jeffrey Scholz [56:44] Sure.


Anna Rose [56:45] One of the reasons we actually reached out to you initially was a viral tweet you shared about quantum computing. Totally different topic. But then when I realized it was you from RareSkills, and I knew about this book, I actually invited you on to just talk about that. But I do want to just mention that tweet. So this is right around the time that the Quantum Computing blog post came out from Google and sort of an announcement, and you broke it down in a nice way. It does still speak to technical education and all of that, but let's talk a little bit about that, because also looking at it before this interview, that thing is like mega viral. It's like 5 million views or something, right?


Jeffrey Scholz [57:24] Yeah.


Anna Rose [57:24] And that's not your field. So, yeah, tell me a little bit about putting that together.


Jeffrey Scholz [57:28] For sure. Yeah. The tweet was successful because of the timing. Every two years, these big companies try to come out and scare people with like, look at our big breakthrough in quantum computing, when in reality it's just to pump their stock or something like that. So the timing was -- like people were like, oh, my gosh, there's quantum supremacy. What's going on? And so since there's already a lot of heightened emotion around the topic, and then the response being in response to something that was already very emotional, it's kind of the right situation for the stars to align. So there is that.


I actually don't think I wrote that thread that well. If I were to go back and do it again, there's actually some jumps -- the progression in a few cases is not like, oh, I should change the order of how I discuss this thing in a few places. So I think just as a meta comment, you can be not that good of an educator, but if you're talking about something where there's nothing on the topic, people will think you're good. But if you're writing on something where there's a lot of information already, your explanation needs to be bang on, and it needs to have beautiful animations and blah, blah, blah, blah, blah, or people are just not going to care.


So I do think that -- so those are the two ways you can be considered a good educator. Either explain well-known things exceptionally well and be very entertaining in the process, or talk about stuff that nobody has a clue about. And quantum computing happens to be stuff that nobody has a clue about.


Anna Rose [58:48] Okay. So it's not your best work is what you're saying.


Jeffrey Scholz [58:51] It's not my best work by a long shot. But the thing with -- again, this goes back to why is ZK kind of difficult to learn? Because the model of computation is weird to people. You're not actually writing an algorithm in ZK, you're writing constraints that model an algorithm. And quantum computing is kind of like that, where you're taking advantage of the fact that entanglement can carry a lot of information between places simultaneously, and then you can probabilistically arrive at the answer. So quantum computing does not work where you get the correct answer each time. You have to run it a few times, and then probabilistically you can figure out that your answer is right.


Anna Rose [59:30] Weird.


Jeffrey Scholz [59:31] And the other challenge with quantum computing is, like with a Sudoku puzzle, for example, you know that you got the answer -- you have to do a search to find the answer. But then you can verify that the search was correct because you just check all the rows, columns and subsquares, right? The thing they were doing with Google was not a problem that you could check. And when they say, oh, this was 10 to the 25 times faster, that's based on extrapolations, not based on -- and no one actually ran the computer for 10 to the 25 times. So quantum gates are kind of like logic gates. That's why I open the thread that way. So hopefully if you --


Anna Rose [01:00:06] I'll add the link to this tweet. And even though it's not your best work, we all know it's -- I could, I could preface that too. A tweet from Jeffrey, not his best word, but yeah -- I'll definitely, I'll add it in the show notes for anyone who wants to see it. Like for me reading, it was actually like, this is a topic that I'd like to cover a little bit on the show going forward. And so, for me it was kind of an introduction in a good way.


Jeffrey Scholz [01:00:27] Something I should say for people who are curious about quantum computing, you can actually use quantum computing in the cloud with IBM. You'll get like five qubits or something like that, and it's like $95 a minute to use that thing. So if you have money to blow, you can play around with a quantum computer. And there are quantum languages for it, which it's not as scary of a field as people think it might be. I mean, obviously if you're going to be a researcher in it, that then, yeah, that's tough stuff.


But what they did in their experiment is they wired up a bunch of random gates together, but the distribution of the output is expected to follow a certain pattern. And then the distribution did in fact match the pattern. So they were like, oh, look, we managed to --


Anna Rose [01:01:14] We got it right.


Jeffrey Scholz [01:01:15] Yeah, we got it right, but that's not very useful. So now they did do have some breakthroughs in there. I'm not knocking them, but obviously, they carefully chose the context and the phrasing so that it would maximize the hype, which we do that in Web3 too. So I can't blame them. But you can't throw stones in a glass house. But I get very annoyed when people overhype things, because I think it's just not helpful to be sort of deceiving people to your advantage, so.


Anna Rose [01:01:43] I think Tarun also had -- he had, in our end-of-year episode, he also cast doubts on how honest the marketing had been there.


Jeffrey Scholz [01:01:52] Yeah. When you read their actual thing, they're very honest, or at least they're not as like being as blunt as I am. But to understand the honesty, you need to have the technical, you need to know what are random gates, and what was actually being done. So when people talk about quantum computing, a lot of it just sounds like ChatGPT wrote it. Oh, there's entanglement, therefore it's faster. We have 01 bits, but now we can have more than 0 or 1. Okay. That's cool. But how does that translate into faster computation? And how does that tell me what Google was doing? So that was, I think, even though it's not my best work, at least I was able to at least cast some idea of what's actually happening, and then speak about it in terms that at least someone who has an introduction to computer science would understand.


Anna Rose [01:02:38] Something that you just sort of highlighted, though the similarity in ZK, where it's like you're trying to use existing paradigms of computer programming, and you're adding it into ZK circuits in one case, but also into a quantum context. I hadn't ever sort of made that connection point that there may actually be just brand new paradigms in ZK as well, potentially. Why are we just trying to rewrite existing things?


Jeffrey Scholz [01:03:04] I think, well, this actually because I studied -- remember I studied computational theory. So fundamentally everything boils down to either carrying out the computation or proving the computation was correct. Or another thing is why can quantum computers theoretically give us a speed up when it's just quantum state collapsing? Well, because we can translate a real problem theoretically into something that collapses, and then that answer comes out of there and tells us something that's useful. So once you just kind of get that there's really only a couple modalities of computation, and then, what we see in ZK or quantum computing is just a different manifestation of it.


This is one thing where I really encourage people to learn the fundamentals is because we've known everything about computation since Alan Turing and Lambda Calculus. But everything boils down to the basics. A lot of it is just engineering to get the basics running faster. Like think about the advantages for these different ZK algorithms that come out. A lot of them are not fundamental breakthroughs. They're frankly more of an engineering thing, which matters a lot because Nvidia is not doing anything innovative. It's all engineering, in terms of fundamentals, what we think of as fundamental science. Or TSMC, we just figured out how to get the UV lights to create less --


Anna Rose [01:04:21] Making things smaller and smaller, sharper and sharper, more efficient, using less energy, making less heat.


Jeffrey Scholz [01:04:26] Exactly. Or even with AI. I think a lot of the models that we use for chats could theoretically be coded in about 900 lines of code or something like that. They're not that complex. What's complex is how to get all this data to be run through a data center, and you're not running into bandwidth issues.


Anna Rose [01:04:45] Although there are like -- I think there, there is some edge -- like some edge where there's new techniques at least, which I think is more in the research front, which are changing the ways this thing works.


Jeffrey Scholz [01:04:56] Yeah. I definitely don't want to say that there's no scientific advancement happening, but a lot of what we perceive as scientific advancement is really engineering advancement. And engineering is oftentimes based on science that's very, very old. So what I recommend -- this is one thing that I think has helped me a lot, just because I studied the foundations of computing very, very closely, Web3 is easy mode for me.


Anna Rose [01:05:18] Well, Solidity, it's never been described as hard. More that hard to get it right. It's easy. It's maybe too easy, but it's therefore easy to also incorporate bugs. And people who maybe aren't as familiar with the EVM have historically just made mistakes because of the way of how easy it is. I always found the Solidity story kind of an interesting one. It's too close to JavaScript or something. It's too familiar, but it's not exactly the same thing. But I guess, ZK is very different, though. ZK is not familiar for people. So they are kind of learning these paradigms, especially if you're working at the level you guys are, they're learning these paradigms in a way for the first time.


Jeffrey Scholz [01:06:02] Yeah. So I would just say in general, it's very important to have the fundamentals in place because a lot of what we call new knowledge is really just a rearrangement of the fundamentals. So if you really solidly know your elliptic curves, you really solidly know your polynomials and your linear algebra, or at least some parts of it. And then people who are creating content about this, and we have study groups, we have courses, we have books and blog posts, you have ZK Whiteboard, these will help you stay caught up with things.


But if you really want to have mastery on the subject and not be dependent on other people to break it down for you, then what people think of as a skill of reading papers is like, oh, I know all the latest information. It's not. You're really fluent in the vocabulary that they use. What they think is obvious to everybody that they don't even explain. Those are the things that you really want to be fluent in, if you want to stay caught up with people on your own and not doing it through other platforms. That's, I really think, is what the core skill that people miss. It's not chasing whatever the latest tough thing is.


Anna Rose [01:07:07] Yeah. Cool. Jeffrey, thank you so much for coming on the show and sharing with us basically the RareSkills story, what you guys are offering, how you're thinking about it. Also, thanks for the little insight into your thoughts on quantum computing and that tweet. Yeah. Thank you so much.


Jeffrey Scholz [01:07:26] I love talking about this stuff. Thanks for having me.


Anna Rose [01:07:28] Yeah. It was also great to meet you. I feel like we work in parallel streams, but had never actually come into contact before. So I'm glad that we got a chance.


Jeffrey Scholz [01:07:35] Great to meet you too.


Anna Rose [01:07:36] Cool. All right. I want to say thank you to the podcast team, Henrik, Rachel and Tanya. And to our listeners, thanks for listening.