Anna Rose [00:05] Welcome to Zero Knowledge. I'm your host, Anna Rose. In this podcast, we will be exploring the latest in zero-knowledge research and the decentralized web, as well as new paradigms that promise to change the way we interact and transact online.


This week, Nico and I chat with Sinu and Dan from TLSNotary. We learned about the history of TLSNotary, from some of Dan's early ideas on the Bitcoin Talk forums in 2013 to the project being brought into the PSE fold. We discussed the breakthroughs that happened along the way that allowed the project to evolve and how it's being used in the wild.


It's inspired a number of other projects that we've had on the show, from Pluto to Reclaim. So it was great to chat with the folks behind this foundational building block technology. We cover how it works, the limitations of the tech, some of the nomenclature issues around these concepts and more.


Now, before we kick off, I just want to point you towards the ZK Jobs Board. There you can find job postings from top teams working in ZK. And if you're a team looking to hire, you can also post your job there today. We've heard great things from teams who found their perfect hire through this platform, and we hope it can help you as well. Find out more over at jobsboard.zeroknowledge.fm. You can find this on our website and have added it to the show notes.


Now here's our episode on TLSNotary with Dan and Sinu.


Today, Nico and I are here with Dan and Sinu from TLSNotary.


Welcome to the show.


Dan [01:39] Thank you.


Sinu [01:39] Thank you for having us.


Anna Rose [01:40] Hey, Nico. How’re you doing?


Nicolas Mohnblatt [01:42] Hello, hello. All good.


Anna Rose [01:43] So, today we're going to be talking about TLSNotary. And that's a project, or kind of a concept that's been brought up a couple of times on the show before. This is the first time we're going to get to do a deep dive.


I think as a starting point, it might be helpful for the audience to understand what is TLSNotary? What part of the stack does this live in? What kind of problem does it solve?


Sinu [02:05] Sure. Yeah, I can take this. So TLSNotary is both a protocol and a library. And fundamentally, what it's trying to do is take information on the Internet and make it cryptographically verifiable.


So, for example, you go to a website in your browser. And the classic example here is you log into your bank's website and that presents to you your bank balance.


Now, right now, there's no way for you to essentially take that bank balance and show it to a third party in a cryptographically verifiable way. You could take a screenshot, for example, but that's not very secure. We have things like Photoshop these days.


So instead, TLSNotary essentially facilitates you to connect to a third party and cryptographically prove your bank balance to them without revealing any sort of unnecessary extra information, such as your login credentials.


Anna Rose [02:53] Cool. So this idea has been brought up a few times on the show before. I think a little over a month ago, we had Maddy from Reclaim on the show. Last year, we had an episode with Pluto talking about Web Proofs. I feel like these are all kind of in a similar category, but I feel like with this --


I mean, as far as I understand, TLSNotary is a bit of an older project, and it has sort of more of a legacy. It's underlying a lot of these ideas. So I'm really excited to dive in.


Now, before we do that, though, I'd love to learn a little bit about both of you. Dan, let's start with you. Can you share a little bit about the start of TLSNotary and why you decided to work on this?


Dan [03:32] Yeah. Well, the interesting part is that there are like two eras of TLSNotary. One which goes back to 2013, and the other is the more recent ones. So --


Anna Rose [03:44] Way back.


Dan [03:45] I don't want to leave out Sinu, but because with him, we started working on this 3 or 4 years ago. But the ancient history, I was at the beginnings of it. So I was wondering, how do we cover this?


Anna Rose [04:02] I actually am now curious about your 2013 history. I think we should start there. Even if it's not quite what it became, just like, if it was the seeds of the idea, I'd love to hear about it.


Dan [04:14] Yeah. Well, somehow I envisioned you're going to ask me that. So, actually, there is a blog, Bitcoin Talk forum post, and I just went there today, reread the entirety of it to kind of remind myself what my frame of mind was, what was the surrounding events. So I kind of reconstructed what was happening back then.


So in a nutshell, Bitcoin was around -- start getting traction in the media on Slashdots, which I was following. So there was this excitement in the air.


And I'm considering myself a libertarian. Well, I considered at that time. So my thought processes was more like effect more freedom in the world, how to effect a change, so to speak.


I wasn't sure which path to take. I quickly realized that the political path is not the most efficient ones. So the technological one was probably where it's at, so.


And I discovered Bitcoin basically. And so, it kind of aligned with that goal of mine, and especially the community around Bitcoin, because it was not marketed or presented like a purely financial solution or something like that. It was a tool to give people more privacy, and there were freedom-minded people around it.


So it was like the social effect as well that kind of dragged me in. The devs behind Bitcoin kind of I felt the kindred spirits in them because I followed their blog posts and whatnot.


Anna Rose [06:04] Was Blockstream already founded by the time you got involved, or was it like just before?


Dan [06:12] Blockstream was founded just when I joined the movement, so to speak. Yes.


Anna Rose [06:16] Cool. I don't know if you know this, I had an episode recently with Austin Hill who is one of the co-founders of Blockstream. But the reason is he used to have a company called Zero Knowledge Systems back in the late 90s. And there's a really funny story there in connection. I'll add a link in the show notes to these past episodes. 


We did three on that company, and Austin also went on to do Blockstream. So I actually heard from him recently a little bit about that history, that period of history of Bitcoin.


Dan [06:43] Oh, interesting. So Anna, you were not around?


Anna Rose [06:47] Not at all. I mean, I was a startup founder. So I was going to tech conferences, and there were sometimes tracks on financial technology, and sometimes on those panels, or in those sort of tracks, there'd be something on Bitcoin. But I was working in video technology and pretty far away from it.


Dan [07:08] Yeah. Okay. So I'm not going to assume that everybody knows the entirety of history, but neither do I objectively know it because my memory is kind of foggy from what was happening.


But so, basically, from my recollection, so Bitcoin was there. I kind of aligned with my ideals, so to speak. And I started to think, where can I contribute to it?


And I think there was a meme floating around -- maybe I'm just making things up, but something like, don't think what Bitcoin can do for you, but what you can do for Bitcoin. And I think that kind of was the mentality of many people. We wanted to contribute to something that was expecting to make a big change in the world.


So I started exploring where can I contribute. Yeah. I kind of dabbled in the source code of the Bitcoin core client, and I tried a few things. But what things popped on my radar, you may say it was coincidental, but it actually ties into my background a bit because I already was familiar with cryptography and WebPKI and stuff like that.


So in that nascent times of Bitcoin, there was a problem of on-ramping people who wanted to exchange their fiat for crypto.


I might have caught some of that us-versus-them mentality. So it just seemed like the banks actively ban accounts both of businesses and users, try to prevent this onboarding process. So it kind of seemed to me like a problem worth digging deeper into.


So this was actually the initial impetus of TLSNotary. It just so happened that Bitcoin was the catalyst of why we started doing that. So this problem of on-ramping users, and supporting peer-to-peer exchanges, those started to pop up everywhere, peer-to-peer exchanges.


But I think they were non custodial. They would just connect buyers and users. I don't think it was like LocalBitcoins, because LocalBitcoins was custodial later on.


Anna Rose [09:30] But how does TLSNotary fit into that? Because it's interesting, you're talking about it as like a exchange. I think of it as so much more like the Web2 signature. It's like, I think of it as sort of a different part of the stack even at this point.


Dan [09:47] Yeah. That's a good point.


Anna Rose [09:48] So what were you posting back then? What was it that actually is that start of TLSNotary?


Dan [09:55] Yeah. I mean, but the way you see it right now is through your current lens when they're -- basically, the ecosystem is already developed and there's a clear use of having Web2 data onchain and things like that. But back then, we didn't think along those lines. And Ethereum did not exist at all, so.


Anna Rose [10:14] It didn't exist. Yeah.


Dan [10:15] Yeah. We just had this narrow blind zone and just the narrow problem to solve, and I didn't expect it would be useful in other aspects.


So, basically, we wanted those P2P exchanges to basically have a flow where the two parties rely on some escrow only for cases where a dispute happens. Basically, only for cases where the buyer claims that they've sent fiat but they have not actually sent it. So we thought how can we give a cryptographic screenshot of their bank page. That was the initial impetus.


Anna Rose [11:02] Ah, wow. So this is sort of this idea though, that you're looking at a website. A website has changed somehow. You're trying to show that that change is true and correct, and it was for this payment use case.


Dan [11:16] Exactly. That was like the --


Anna Rose [11:16] Go it.


Dan [11:17] Initial narrow focus that I kind of started drilling down into. Yeah. I didn't expect it to be anything bigger than that.


Anna Rose [11:26] Where did you go from there, though? So you're talking 2013. Did you work in the industry for a while? Did you work more on the payment side? Was this an idea that you had and then parked and then came back to? Or was it something you've been working on ever since?


Dan [11:41] No. Actually, I've been in the blockchain space only like the last five years. I was --


Anna Rose [11:46] Okay. So you left, or you explored and then you did something else?


Dan [11:49] No. No. Yeah. Please hear me out. I actually never joined it, but hear me out. So I was -- basically, I was in the -- broadly speaking, in the IT solutions sector.


Anna Rose [12:00] I see.


Dan [12:00] More on the development integration side of things. So some projects that I worked on already include network security solutions, cryptographic deployments. So with that background, when Bitcoin came around, I started thinking how I could contribute.


But to fast forward, I actually never joined the space, the crypto space, even though TLSNotary came to exist. So I only joined it five years ago.


Anna Rose [12:29] What year did you join? 2020?


Dan [12:32] 2020, roughly.


Anna Rose [12:33] Okay.


Dan [12:34] Yeah.


Anna Rose [12:34] So what was TLSNotary working under? Where was it if it wasn't in blockchain?


Dan [12:40] Just a passion project. Yeah.


Anna Rose [12:41] Okay.


Dan [12:42] Basically fueled by the enthusiasm of two guys like myself and Adam Gibson, one of the other devs, very passionate about it. And fueled by this idea that we need to give something to the world that is cool and useful and is needed.


Anna Rose [12:58] So where does TLSNotary start? The 2020 version?


Dan [13:02] Yeah. Let's fast forward to that. And I guess it's Sinu's turn to talk about that because that's --


Anna Rose [13:10] Well, is that where he joins?


Dan [13:12] Well, actually, no. Actually, I kind of brought TLSNotary to a proof of concept state. So I did my mission and I kind of went back to my day job. And then, Sinu reignited the movement again. Yeah.


Anna Rose [13:28] Cool. Okay. So Sinu, why don't you tell us a little bit about what got you started on this sort of project, where you got interested, maybe a little bit of what you were doing before.


Sinu [13:38] So, my background's actually pretty varied. I started off my career in electrical engineering, I did some years in the trades, and then I got back on the computer and got into doing data engineering and analysis around 2017 or so. And that's about the era where I really started paying attention to crypto.


And I was just like anyone else, totally hooked, spending most of my time, most of my spare time keeping track of what was happening in the space, learning as much as I could.


And it took me about four years before I actually wanted to dip my toes into try working in the space. But everything prior to that was really just like, I was passionate about what was happening.


The way that I got exposed to TLSNotary was really just -- I was interested in identity, and I noticed that there wasn't very many ways to leverage your identity information with decentralized applications.


And actually, my very first introduction was I just wanted to implement something that would issue a POAP by proving something personal about yourself.


And I was kind of looking around the space, and realizing, there's no real good way to do this. You have things like OAuth, you have things like OpenID, but those are kind of permissioned and they just come with a whole host of problems that didn't seem to really fit well with dApps essentially.


So I was kind of looking into the space, and at some point or another I got connected with Justin Martin and Barry Whitehat at PSE. And Barry Whitehat -- well, actually both of them were very excited about DECO at the time, and they were kind of wondering where's the implementation? What's happening here? Hey, maybe we can build this ourselves. We need an engineer to kind of help get this off the ground.


So got together with those folks, kind of fleshed out what we wanted to do. And that was in, I believe, the 2022 year, earlier in the year there. So we kind of kicked off, just kind of doing some surveying of what are potential solutions here.


And I came across TLSNotary. And I was like, oh, this is an awesome project. This does essentially exactly what we want to do. This is something that facilitates cryptographically proving information on the Internet.


And I actually cold reached out to Dan. I just opened up a GitHub issue in the TLSNotary repository. And I said, hey, we're interested in this problem. Would you be interested in kind of moving TLSNotary underneath the wing of PSE and see if we can kind of reinvigorate this project, reevaluate the solution space, apply modern technology and things like that.


And yeah, Dan got back to me, I think over email, and from there we were like, okay, let's take a full shot at reevaluating TLSNotary from first principles and see if we can come up with a clean solution and one that's going to be using just modern cryptography and something that was also going to be implemented to just like a higher standard. Something that is going to be suitable for handling potentially sensitive user secrets, and things like that.


Anna Rose [16:55] Cool.


Sinu [16:56] And that was really the initial start was in about in 2022.


Nicolas Mohnblatt [17:00] So it started as a, I guess, passion project for you, Dan, suddenly goes under the wing of PSE and becomes sort of a fully fledged, let's prove any sort of TLS transcript?


Dan [17:10] Yeah. You could say so. But it wasn't sudden, it was like -- there was a big gap like 5 or 6 years between those events. Yeah.


Anna Rose [17:19] Did you then join PSE as well, Dan? Did you sort of go into the org?


Dan [17:24] Yeah. Me and Sinu, we applied for a grant, and --


Anna Rose [17:28] Okay.


Dan [17:29] We got a three months grant. After that, the PSE saw the value in kind of taking it in-house, so we became like PSE members.


Anna Rose [17:38] Cool.


Nicolas Mohnblatt [17:39] So I'm curious a bit about the different stacks. Obviously, the first version was before we have this DECO paper which tells us we can do this sort of client and notary MPC stuff.


So what was the first version? And then, where are today's TLSNotary efforts going?


Dan [17:57] Yeah. The first version was kind of exploiting a specific peculiarity in TLS 1.1. The current most prolific version of TLS is 1.2. So it was kind of a hack, but it kind of worked, but the current TLSNotary version, it still kind of is based on the same fundamental principles, but it uses general-purpose MPC. And Sinu, I'll let you carry on from here. Yeah.


Sinu [18:24] So the term "notary" actually just brings this implicitness that you're talking about attestations. But TLSNotary really is just a two-party protocol between a prover and a verifier. And that verifier essentially witnesses the TLS transcript, and then may issue an attestation about that transcript. 


So in that case, you would call it a notary. But I think it's simpler to think about it as just a two-party protocol between a prover and a verifier.


And the fundamental idea of TLSNotary even back in 2014 was, hey, we can essentially emulate a TLS client between the prover and the verifier by secret sharing the TLS session keys between the two parties in such a way that neither the prover nor the verifier know the full session keys.


Nicolas Mohnblatt [19:15] This is what we refer to as the MPC part. Right?


Sinu [19:17] Right. So the older version of TLSNotary, it exploited the RSA key exchange of TLS 1 and TLS 1.1, the homomorphic property of it. And newer versions of TLS use elliptic curve cryptography with the Diffie-Hellman key exchange.


But the idea is still fundamentally the same. Both the prover and the verifier essentially provide a piece of entropy that's used to generate the TLS session keys.


And the critical part here is that the prover doesn't know the full encryption or MAC keys, and neither does the verifier. So the verifier can't decrypt the data, you don't want them to see the plain text, and the prover can't authenticate messages which the server didn't send, for example.


That was the fundamental idea is, hey, let's essentially secret share the TLS session keys with the prover and the verifier in a transparent way to the server.


Except TLS 1.2 came out, and the cryptographic primitives that were used in the older versions of TLS rapidly got deprecated. And TLS 1.2 kind of used different algorithms which made this a lot more difficult and kind of broke the hack that the older versions of TLSNotary exploited, which allowed you to do this kind of secret sharing of the TLS session keys.


And that's where DECO comes in. So around, I think, DECO is 2019, 2020. They essentially took a look at this problem and realized, oh well, we can essentially do the same thing, but just apply general-purpose MPC to achieve the same outcome. So they leveraged essentially general-purpose MPC to enable the secret sharing of the TLS session keys.


Anna Rose [20:58] So it does sound like there was a lot of kind of different tracks of research happening, some of which were inspired by TLSNotary, some of which kind of maybe came before.


Yeah. What else influenced the work you were doing? Was there other libraries or breakthroughs that had happened around the time that you actually brought this into PSE that made it more possible to do this?


Dan [21:21] Yeah. There were some. So other than DECO, there was PADO paper, which is now Primus, and we borrowed heavily some of the techniques they used because they used a more efficient MPC. I would say that's about it. DECO and PADO are the giants. Yeah.


Anna Rose [21:39] Cool. Nice. What about something like Town Crier? What is that?


Dan [21:43] Town Crier is a TEE-based solution which solves the same problem as we do.


Anna Rose [21:49] Okay.


Dan [21:50] Basically.


Anna Rose [21:51] But unrelated?


Dan [21:52] Unrelated to us.


Anna Rose [21:53] Got it.


Dan [21:54] Yeah.


Anna Rose [21:54] These were just research papers. And I think what we learned on the Reclaim episode, there had been some small implementations of these papers, but they weren't really usable yet. They weren't like in production in something.


Dan [22:08] Yeah. Actually, Town Crier existed.


Anna Rose [22:10] Okay.


Dan [22:10] They had a website. You actually could go there and they would issue an attestation or something, and they would actually tweet it for you. But it was like a proof of concept. But it actually existed, but it was not production great quality, something that you can plug in. Yeah.


Anna Rose [22:25] Interesting. Just back to the story. We're in PSE, you've brought it in-house. Were you interfacing with existing projects already in PSE as well? Were you kind of building for anyone, or was it just the development of this idea?


Sinu [22:41] It was really about just the development of this idea. There was a fundamental problem is that, you know, most of the information that we care about are -- it kind of exists siloed in servers --


Anna Rose [22:51] On the web.


Sinu [22:52] On the web, in "Web2. And the idea was always just, hey, how can we essentially allow users to leverage existing information on the web in a Web3 context using decentralized applications?


Yeah. So I mean, the DECO paper was there, I believe that there was a proof of concept available in a GitHub repository somewhere, but there really wasn't anything that was kind of fully developed out. And DECO itself also had some concerns about whether or not it was going to be actually performant enough to run on a low-power user device.


So the original DECO paper, if I remember correctly, used fully malicious secure MPC with, I believe, authenticated garbling. And having that, actually, run on a user device in order to implement TLSNotary, it just didn't really seem feasible.


So the first part of our project was really just about how can we still leverage this general-purpose MPC idea? Leverage it practically. It needs to run essentially on mobile devices. And at the time, it didn't really seem like that was going to be possible.


So we kind of went through this whole research stint of, okay, how do we implement this MPC TLS protocol using general-purpose MPC, but without using essentially the state-of-the-art malicious MPC that was available.


So at the time, it seemed like it wasn't feasible. But after kind of inspecting the protocol long enough, we had a fundamental insight which is that we actually didn't require malicious secure MPC. Semi-honest garbled circuits,  particularly, the half gate protocol that we were interested in is secure against a malicious evaluator, but not secure against the malicious generator.


And we realized that at the end of this whole protocol, the only party which needed to continue to have private inputs is the prover. So at the beginning of MPC TLS, both of the parties have private inputs, they have to secret share the TLS session keys. But at the end, it's okay for the prover to actually learn the full TLS session keys.


Nicolas Mohnblatt [24:57] After the verifier has been convinced, I'm guessing?


Sinu [24:59] Exactly. After the TLS transcript has been committed to the verifier, the verifier is free to reveal their component of the TLS session keys.


And then, after that it's kind of just up to the prover to essentially prove that the MPC that they had performed was performed honestly, or at least putting some sort of statistical bound on the leakage of those session keys in the case that they did deviate from the protocol.


And this kind of fundamental insight allowed us to reduce the total MPC costs of the protocol by approximately a factor of 10. It was at this point we realized, okay, it is actually practically feasible to run this stuff on a low power user device.


Nicolas Mohnblatt [25:38] At this point, sort of how long did it take to run the protocol on a consumer laptop?


Sinu [25:45] With this kind of optimization figured out?


Nicolas Mohnblatt [25:47] Yeah.


Sinu [25:48] It varied a little bit because we had to do some implementation optimizations. But nowadays, it depends on the bandwidth of the connection between the prover and the verifier. But you can expect on the order of anywhere from 5 seconds on a good connection to 20 seconds on maybe a moderate connection. And then if you have a really slow connection, it's going to take a while.


But that's also a function of how much data actually gets communicated over the TLS connection.


Nicolas Mohnblatt [26:15] By the way, this is super different to what we're used to talking about on the show, because usually we have just a non-interactive proof. So I have everything I need on device, I prove, and however much compute I have, that's how long it's going to take.


In your case here, you're talking about bandwidth, right? So there's interaction happening, and I'm almost limited more by the bandwidth than I am by compute. Is that correct?


Sinu [26:36] Yeah. That's the fundamental constraint on all of this is that it's an interactive protocol which involves communicating a lot of data between the prover and the verifier.


Anna Rose [26:47] Does the tech stack underlie some of the projects that we hear about today in the ZK space? We talk -- you know, we mentioned the Reclaim episode, but there's also like Opacity, Pluto, like teams that are doing Web Proofs or proof about something on the web.


Are they usually using the TLSNotary tech stack under the hood? Have they taken what you're doing and done something else with it? And what's your relationship to those teams?


Sinu [27:12] Yeah. There's a handful of teams that are using it. I will actually just correct. I don't believe that Reclaim is using TLSNotary. They have their own implementation of the proxy variant.


Anna Rose [27:23] Got it. Okay.


Sinu [27:24] But like you said, Opacity Network, there's vlayer. I believe at some point Pluto was exploring using TLSNotary, but I'm not sure if they're still using it these days. And then, there's a handful of projects that we're actually not --


Anna Rose [27:37] Not allowed to talk about.


Sinu [27:38] Well, no. We're allowed to talk about, but we know folks are using it, but we don't necessarily know who. There's a lot of forks of our project on GitHub.


Anna Rose [27:47] Interesting.


Sinu [27:49] And then we have people experimenting with it that pop into our Discord channel and speak with us. But kind of the main folks that we're communicating with these days would be like Opacity Network, vlayer. There's some more application-specific projects like Keyring that we're in contact with. But yeah.


So TLSNotary really just focuses on providing the core library, just the zkTLS implementation, but there's a lot of tech that has to be kind of built up on top of that.


Nicolas Mohnblatt [28:17] I was going to say, wasn't ZKP2P using TLSNotary, and almost sort of closing the loop of these peer-to-peer on-ramp, off-ramp things?


Anna Rose [28:26] Totally.


Sinu [28:26] Exactly. Yeah.


Anna Rose [28:27] Wow.


Sinu [28:28] ZKP2P is definitely one of my favorite applications of the technology. And you're right, in my view, it kind of manifests the original impetus that spawned TLSNotary way back in the day.


Anna Rose [28:40] That's so cool. It goes back to your story, Dan, of your first idea of it just being on-ramp. Nice.


What is TLSNotary today? Because it's been a PSE project, but is it something that -- basically, how do you maintain that? How do you -- are you still in PSE? Would you spin this out as a company?


Sinu [28:56] Yeah. We're still a project within PSE. We've tried to kind of narrow the scope down and maybe not tackle so much of this problem. We're really just focused on providing just say open-source option for folks to be able to leverage zkTLS.


Anna Rose [29:12] Nice.


Sinu [29:12] So yeah, we're not really trying to monetize or productize zkTLS. We just want kind of a vendor-neutral option that anyone can build on top of, and to really just focus on the core library itself.


Anna Rose [29:27] It's interesting you talk about TLSNotary also as being kind of like -- it sort of picks up steam when you start to use this tech towards connecting Web2 data to onchain data. And yet, what we have been hearing is more and more of these use cases where it's totally off-chain. It's Web2 to Web2 proving. Like you don't even need the blockchain anymore.


Sinu [29:51] Right.


Anna Rose [29:51] Is this something you've noticed as well?


Sinu [29:53] Yeah. We've definitely noticed it. I'm actually -- I'm excited about both cases, but I do think that it does unlock a lot in the "off-chain" context, however you wanted to define that.


But I mean, there's a lot of data kind of just locked up in data silos that aren't really usable by users. And this is something that I think kind of hampers applications on the web, and kind of reduces market competition because you kind of have this monopolistic effect occurring with people's private information.


So yeah. zkTLS is definitely being looked at a lot for just like, hey, how can we just plug into existing data sources in a permissionless way to allow users to explore just new applications and new value add using their personal information that they already have.


Anna Rose [30:44] Fascinating.


Sinu [30:44] As opposed to potential other avenues such as using OAuth or OpenID, those are permissioned solutions which require the entity which holds this data to actually support that integration with this potential new application.


Whereas zkTLS works completely client side. So the user can prove the information to a third party in a transparent way to the server. So as long as they have access to it, they can make a cryptographic proof to a third party about that data.


Nicolas Mohnblatt [31:16] There is one thing I find particularly interesting with the off-chain case, and this ties back to what you said earlier. These protocols are fundamentally two-party protocols. I need to run this with a verifier and, unfortunately, a smart contract alone cannot act as this verifier.


And so, it almost makes more sense to run this off-chain with a live party than with a blockchain. Because this link between how do I go from this two-party protocol to a blockchain is actually quite hard to do. Right?


Sinu [31:44] Right. It's unfortunate, but the protocol is designated verifier. It's interactive. So you can't take this TLS transcript and just show it to anyone. The verifier has to be actively engaged in the TLS connection. So you're in this designated verifier setting.


Nicolas Mohnblatt [32:03] And the intuition here is that the verifier is the only person who knows we split the key correctly.


Sinu [32:09] Yeah. Essentially. So, I mean, it's also obviously related to the oracle problem as well. When you're bringing things onchain, you're fundamentally talking about attestations.


So you can use something like TLSNotary to implement an oracle protocol, but those are still going to be attestations and you'll have to build some sort of consensus protocol on top of that to maybe have some sort of threshold check on like having multiple attestations for that particular statement that you're trying to prove.


Nicolas Mohnblatt [32:41] Right. So I could engage in the TLSNotary protocol with four or five different attestators and as long as they agree between themselves that they all verified the same thing, then we bring it onchain?


Sinu [32:52] Exactly.


Nicolas Mohnblatt [32:53] Okay.


Dan [32:53] But just to be clear, the current way to do it is you would have to prove the same piece of data to each of those verifiers individually. Then they have to kind of collate that data and come to agreement. But technically, it is possible to to integrate this n of m verifiers agree to something into our core protocol, but that's a big lift and probably out of scope.


Nicolas Mohnblatt [33:23] So moving from two party to n parties, and then we have all this bandwidth issue even worse.


Dan [33:30] Requires more -- yeah, yeah.


Nicolas Mohnblatt [33:30] I see.


Dan [33:31] Exactly.


Nicolas Mohnblatt [33:32] I see. I really like the way you presented, Sinu, talking about designated verifier proofs, and I think there have been a few debates online about the term "zkTLS" and this intrinsically-designated verifier nature of these protocols.


Sinu [33:48] Right. Yeah. I think that people, when they normally think about zero-knowledge proofs, they think non-interactivity publicly verifiable, maybe even succinct things like that. But in the case of TLSNotary, it's a two-party protocol where only the verifier is receiving any sort of guarantees about the authenticity of this transcript. And that's not something that you could just post on a public ledger and where everyone would be able to verify that for themselves.


Nicolas Mohnblatt [34:15] It is zero knowledge. Right? We do actually have ZK in that sense.


Sinu [34:19] It is zero knowledge in the sense that --


Nicolas Mohnblatt [34:20] Okay. Cool.


Sinu [34:21] Yeah. Only the prover knows the underlying plain text that was actually communicated with the server. The verifier really only sees the encrypted ciphertexts. But the prover does also have the ability to selectively disclose the plain text as well, if they wish to.


Dan [34:37] Yeah. I just wanted to add like the zkTLS may be considered a misnomer just because it immediately makes you think about non-interactive zkSNARKs. And actually we had it happen a few times.


Like when we present TLSNotary, people immediately want to improve upon it. Like how can we make it more optimal? And they think that maybe there is no need for a verifier at all. We can just make it like a zkSNARK. Just you, the prover, do something with the data you receive from the server and turn it into a proof. But yeah -- that's the first reaction, but unfortunately, no, that's not possible.


Anna Rose [35:21] It's not how it works. Do you think there's an issue beyond just folks asking you at conferences thinking that ZK is in zkTLS, or like using that term?


I mean, Nico, you've made a few tweet threads about this. I think, Sinu, you too, where it's like it's a problem. But is it a problem? Are people misunderstanding the tech when they're using it, potentially?


Nicolas Mohnblatt [35:41] It would be great to have people using the tech.


Anna Rose [35:45] Oh yeah. Well, tech, like theoretically.


Nicolas Mohnblatt [35:41] Yeah.


Sinu [35:47] Yeah. I mean, it is a tough question to answer. It's fairly nuanced, and it really depends on who you're talking about and what sort of mental model they have when they think about the ZK prefix being applied to something.


I will say that when zkTLS is used to essentially issue attestations about the TLS transcript, that should be made crystal clear. If you're being presented with an attestation about a TLS transcript, you're really trusting the verifier to have performed that honestly. And there's nothing stopping them from essentially generating a fake transcript themselves and signing that and presenting it to you.


So in that sense, it's not publicly verifiable. And I think that some people do get -- they do definitely stumble on that because at first glance, if you have that misunderstanding, you might think, oh, wow, this essentially solves the oracle problem. I can query a server and cryptographically prove in a publicly verifiable way this TLS transcript on this bulletin board, and anyone can verify it, when that's not the case.


We're in the designated verifier setting, and if you want to do something like that, you really do need to do what we were talking about before, which is run the protocol multiple times with multiple different parties and then build some sort of consensus over top of that, some sort of threshold of parties which agree upon the validity of the information that you're purporting.


Nicolas Mohnblatt [37:21] By the way, talking about the oracle problem, that was sort of the source of DECO. Right? DECO actually stands for Decentralized Oracles. So it's all bringing that connection back in.


Sinu [37:32] Yeah. I believe that they definitely had that particular use case in mind.


Nicolas Mohnblatt [37:35] Yeah. So what I was curious about is, as a user, when I want to use these systems, what happens? Am I downloading an app, and then this app is asking me, please put in your bank password? And I just have to trust it that it's going to do an attestation and not reveal anything or not send anything back to whoever the vendor is?


Sinu [37:55] Right. Yeah. There are multiple ways to essentially deploy this. And one way in which you could do that is you could just embed this within a mobile application, distribute that for users to install, and then present them with your own login form where they'll put in their username and password. And they essentially have to trust that you're not just sending that over the Internet to the remote server, and giving up your login credentials.


This is, I would say, still a bit of an open problem, because one way or another, you are having to essentially delegate your private information to a piece of software in which you're not necessarily equipped to assess whether or not it's doing what you expect it to do.


We have a proof of concept, which is our browser extension, and it essentially does this. When you install it, it has to -- you have to grant it more or less universal permissions to read and write to the web page that you're on. You need to be able to delegate access to cookies on a web page, for example.


Nicolas Mohnblatt [38:52] This is the first thing I tell my mom not to do.


Sinu [38:55] Exactly. Exactly.


Nicolas Mohnblatt [38:56] Like  do not download these extensions. Do not authorize this stuff.


Sinu [38:58] Exactly.


Nicolas Mohnblatt [38:58] Yeah.


Sinu [38:59] And that really is kind of a hard problem to address. We have some ideas that we're working on right now to kind of try to reduce the surface area of risk there. For example, do you install just one extension that you know comes from a reputable source and the developers are telling you that it's secure?


Maybe there's some sort of fresh consensus on the Internet that this browser extension is legit and it doesn't share your credentials.


Or you could have a situation where every time you want to use an application which leverages zkTLS, you have to install their extension. You kind of have this duplication of surface area across different applications. So that's one question is just like, how do you actually distribute the zkTLS prover to the user, and how do they know that it does what you expect it to do? I regard that as fundamentally still an unsolved problem.


Nicolas Mohnblatt [39:51] Is there a world where we have these provers in our browser built in?


Sinu [39:56] Yeah. We have looked at that a little bit before. We've talked with the folks at Brave, but you can imagine that there's still an apprehension. This is still relatively new in kind of experimental software. So it's kind of a hard sell to be like, hey, here's this new tech that does this fairly niche thing. Can you integrate this like first class into your browser and distribute it to your users?


So right now, we're still in an early experimental stage, and we're kind of limited to distributing in the browser context as a browser extension. And in the mobile context, application developers have to embed this into their application, distribute it to their users directly.


Anna Rose [40:35] Do you think, though, will this -- because it does seem really useful, could it just be that it needs to be adopted somehow? It needs to catch the attention? Is there other larger incumbent players who could potentially adopt something like this beyond browsers who would push it?


Sinu [40:52] That is a tough question. The issue I see here, that I see there is that this technology is kind of fundamentally disruptive, and it's more towards empowering the user. And it actually is in some way larger institutions and incumbents which are already established, more or less have a disincentive from seeing this happening.


For this does happen, I feel like it's going to have to be something that is driven by probably like the startup ecosystem in which you see that -- articulating the thesis on this is difficult.


Anna Rose [41:27] Going even further off afield, is there any connection -- is there any use in LLMs or models or AI? Is there anything where the TLSNotary, or kind of proving things about what's happening inside a system, is it useful there?


Sinu [41:45] Yeah. In the context of AI, I have thought about this a little bit before. I mean, for the off-chain use case, you can prove the authenticity of some data at some origin, and AIs need data. When you're trying to train your LLM, you need a lot of data, and ideally, that data would be authentic, and wouldn't be perhaps generated by another LLM.


So you could just imagine a case where a company would allow their users to crowdsource the LLM data. So say bunch of users install their extension, and they can get paid for going to a website and essentially exporting that data to this aggregator who takes that information and sells it to AI companies, which are trying to train their LLMs with some sort of guarantee that this information is authentic.


I think that there's probably ethical issues with that, but I do see potentially some application for this, particularly, in just the sourcing of information for LLMs to be trained on.


Anna Rose [42:47] Cool.


Nicolas Mohnblatt [42:48] So we're okay with freeing up our data from data silos, but what if I start using this in protocols where deniability is a good thing.


So we have these messaging protocols, like off-the-record protocol. And one of the big properties there is, I don't sign what I say, and it's a real conversation. It's off the record. You can't prove that I said or did not say something.


Suddenly if the person I'm interacting with is doing this MPC stuff, maybe they can start writing proofs, or at least proving to this verifier something that's been said.


And I actually saw a ZK Hack project going in that direction, and I'm starting to wonder, is there potential misuse of this amazing capability?


Sinu [43:31] That's definitely something that we thought about before. You know, non-repudiability is potentially very valuable to have.


Nicolas Mohnblatt [43:38] Yeah. It's a feature sometimes.


Sinu [43:39] And you're right. Yeah. You could definitely connect to a third party and prove that you received some sort of private message in which the sender was assuming that this was going to be confidential between you two. 


And like I was kind of alluding to before with the LLM case of sourcing data for LLMs, really what you might be talking about there is exfiltrating data that's behind access control, and the origin of that data doesn't want you distributing this information.


I'd say there's definitely ethical concerns there. But I would also say that this is a bit of a Pandora's box being open moment where I don't see a way of going back from this. If the Internet relied previously on reputability existing just due to no one had come up with a clever trick to modify TLS to make this possible, I'm sorry, but that --


Anna Rose [44:30] That's not safe.


Sinu [44:32] That's over now.


Nicolas Mohnblatt [44:33] Right.


Sinu [44:33] These technologies exist, and the Internet is just going to have to adapt to the new reality that any information that you're distributing is potentially going to be cryptographically proven to a third party.


Nicolas Mohnblatt [44:46] So there's almost an arms race between deniability and being able to prove everything.


Sinu [44:50] Exactly. And there's this fundamental tension as well. We want authenticity. You want to be able to authenticate the party that's on the other end of your communication channel. But when you do that, you are kind of giving up deniability in that sense.


Anna Rose [45:06] Wow. Interesting. Can you share a little bit about where the project is going, if there's sort of a direction, like other new spaces that you're trying to explore with what's coming up?


Sinu [45:17] Yeah. So PSE is going through a lot of changes right now, and actually, part of what we're trying to do in our project is figure out what makes sense for us to continue to work on.


Like I said, there's a lot of problems in this space just on top of the core protocol, and we're trying to figure out what's actually critical for us to actually intervene and to work on.


So at the moment, we're kind of thinking that we're just going to keep our focus just relatively small, just on the implementation of the core protocol. Having just a open-source library that people can use to leverage this technology that's vendor neutral, it doesn't come with any strings attached, it's just free open source software.


And we're going to invest in improving the quality of that software, improve testing, get it audited, and try to just have something that is a solid option for people to use.


And then, going into the future, we're still kind of evaluating where are the key points in this, I guess, you could call it the zkTLS space which we need to potentially invest some resources into to solving some of these problems.


So PSE is particularly focused on privacy in the Ethereum application layer. And if zkTLS is going to be used for applications that are built on top of Ethereum, these hybrid apps which are trying to leverage Web2 data, we're going to keep an eye on how it's being used, and look for areas where we can potentially contribute to ensuring user privacy.


Anna Rose [46:45] Awesome. Dan, do you want to add anything there?


Dan [46:48] Yeah. I just want to say, like it was mentioned earlier, how do end users interact with this technology? Because, I mean, what we're building is an essential piece of the puzzle, but it's just not enough to drive the adoption. So we have a lot of builders who -- and early adopters who recognize the potential and are hard at work building on top of well, I call it MPC TLS, zkTLS.


Yeah. And so, I mean these are the people which actually put their thoughts into how make it more user friendly, discover new use cases. Because sometimes you need to have specific knowledge in a certain area of the legacy world to know how to integrate MPC TLS into it, to know if there's demand there.


So, I mean, it's basically those builders which do all the heavy lifting. We're just providing the core tools for them.


Nicolas Mohnblatt [47:48] One other question, since Anna, you had Maddy on the show a few weeks ago, and talking about future plans, Maddy said, well, we're -- right now Reclaim is using the proxy mode, but we're looking at MPC mode, we're looking at what TLSNotary is doing, and how it's progressing.


So I guess I'll flip the question. Are you guys ever looking at the proxy mode stuff, and do you consider adding it as an option to the library, or is it completely different?


Sinu [48:12] Yeah. So we are interested in providing the proxy mode essentially as an option, and then we're just going to have to communicate our best what those trade-offs are between the MPC TLS and proxy mode. But yeah, we're definitely interested in just providing it as an option for applications where that makes sense.


Anna Rose [48:27] Cool. So it will actually be built into it.


Sinu [48:30] Yeah. A lot of the underlying software that's required to implement proxy mode is essentially the same as MPC TLS. So we'll be able to reuse quite a large part of our existing code for that implementation.


Anna Rose [48:44] Nice. Well, I want to say thank you, Sinu and Dan, for coming on the show, sharing with us the history of TLSNotary, some of the work that inspired it, also work it inspired, painting a picture for us in where TLSNotary lives kind of in the larger ecosystem. Yeah. Thanks so much for sharing all this.


Dan [49:03] Thanks for having us.


Sinu [49:05] Thanks so much for having us on. It's a pleasure.


Anna Rose [49:07] Cool. Thanks, Nico.


Nicolas Mohnblatt [49:08] Thanks. It was nice also to get to talk about the zkTLS distinction, because I feel quite strongly about making sure people know this is designated verifier, and it is truly an interactive protocol.


Dan [49:18] Yeah.


Nicolas Mohnblatt [49:19] So thanks both.


Anna Rose [49:20] Cool. Thanks to the podcast team, Henrik, Rachel, Tanya and Kai. And to our listeners, thanks for listening.