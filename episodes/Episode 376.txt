[Anna Rose] (0:05 - 0:21)
Welcome to Zero Knowledge. I'm your host, Anna Rose. In this podcast, we will be exploring the latest in zero knowledge research and the decentralised web, as well as new paradigms that promise to change the way we interact and transact online.


[Anna Rose] (0:28 - 1:45)
This week, I catch up with Bobbin and Gaylord from Miden. We discuss the history of the project since we last covered it back in 2021, their work within the Polygon project, and the recent spin out of the Miden blockchain. We cover the zkVM space, privacy and its different flavours and how Miden looks to differentiate itself from existing privacy projects, as well as within the ZK scaling initiatives.


One fun fact about the guests and the co-host of this episode, we've all been involved in some capacity in the making of the ZK Whiteboard Sessions. Speaking of, ZK Whiteboard Sessions Season 3 have just launched. The ZK Whiteboard Sessions are produced by ZK Hack in collaboration with Bain Capital Crypto.


Every two weeks, we have our hosts Nico and Guillermo going deep into the key concepts in ZK and you can watch them over on the Zero Knowledge Podcast YouTube channel. I've added a link in the show notes. Please do check them out.


These are a great resource to learn about the fundamentals and techniques powering the ZK systems we often discuss on the show. And now here's my interview with Bobbin and Gaylord from Miden.


Today, Guillermo and I are here with Bobbin and Gaylord from Miden.


Welcome, everyone. Welcome, Gaylord. Welcome back, Bobbin.


[Bobbin Threadbare] (1:45 - 1:47)
Hi, everyone. Great to be here again. And thank you for having us.


[Gaylord Warner] (1:48 - 1:55)
Yeah. Hi, Anna. It feels like I'm in the Tron movie, in the video game, in the Matrix.


[Anna Rose] (1:54 - 1:55)
You're on the other side.


[Gaylord Warner] (1:55 - 1:57)
On the other side, yeah.


[Anna Rose] (1:57 - 1:58)
Very cool. Hi, Guillermo.


[Guillermo Angeris] (1:59 - 1:59)
What's up?


[Anna Rose] (1:59 - 2:37)
This feels like a little bit of a mini reunion having all of you on because we've all, well, I've worked with all of you on certain capacity over the last few years, which we will learn throughout this episode. I'm going to start with Bobbin. Bobbin, you, I think, first came on the show in 2021.


I think we met around that time. You were part of the ZK Hack Online Mini, our second online event. We had done it all about Winterfell.


So like this is I remember working with you on that. And you were also one of the hosts of the first season of the ZK Whiteboard Sessions, which I want to talk about later in this show.


[Guillermo Angeris] (2:37 - 2:39)
Oh, really? I should have known that. Yeah.


[Anna Rose] (2:40 - 3:08)
So we have like a lot of cool touch points. In that episode we did in 2021, we talked a lot about your backstory. You had worked at Facebook, created Winterfell.


I'm going to link to that in the show notes if anyone wants to hear kind of that part of your story. But I think we should get brought up to date on all of the work that you've done since then. So go back to 2021.


I think right at that point, Miden had joined Polygon. Tell us what has happened since.


[Bobbin Threadbare] (3:09 - 3:24)
Yeah, definitely. So I think we're actually thinking back. We met even before that.


I think one of the first things I did was the ZK Study Club, where I talked about the STARKs the first time where I was still learning about how STARKs work.


[Anna Rose] (3:24 - 3:47)
Oh, woah! I didn't realise that.


So what he's talking about here is the ZK Study Club, which is like we used to do and we sometimes still do these like monthly paper reads together, basically. And that, I mean, that goes back to 2019, actually, in that case. Oh, cool.


Oh, sorry. I missed that one. I'll try to dig up the video.


We would have recorded it if you hosted one. It was recorded. Yes.


[Bobbin Threadbare] (3:47 - 3:48)
It was somewhere online, actually.


[Anna Rose] (3:49 - 3:54)
Cool. Okay. So we go back even further.


But yeah, let's go back to 2021.


[Bobbin Threadbare] (3:55 - 3:55)
Yes.


[Anna Rose] (3:55 - 3:57)
Tell us about what's happened since then.


[Bobbin Threadbare] (3:58 - 4:21)
Yeah. So 2021, when I was in the show, I just joined Polygon and I was coming out of Facebook. As you said, I had the Winterfell prover and I was working on the zkVM.


It wasn't actually called Miden at the time. There was no Miden. I think Miden was the name was created inside Polygon.


I don't know if you guys know about the meaning of the name, but it actually means zero in Greek. So it was kind of a play on zero knowledge.


[Guillermo Angeris] (4:21 - 4:29)
Wait, also, sorry, really quickly. What is Winterfell? I actually I know it's been mentioned multiple times.


It is a boring, like old school question, but...


[Anna Rose] (4:29 - 4:30)
No, not bad to recap.


[Guillermo Angeris] (4:31 - 4:32)
I'm just curious. Yeah, contextually.


[Bobbin Threadbare] (4:32 - 4:41)
So Winterfell was the STARK prover that I've built while I was at Facebook. It was one of the projects. Like in Facebook, I was part of the crypto group, the Diem or Libra.


[Guillermo Angeris] (4:42 - 4:45)
I do remember from there, but I was, okay, got it. That's the connection.


[Anna Rose] (4:46 - 5:00)
And it was sort of the alternative, like, I think StarkWare and had really pioneered the STARK work and had been doing a lot of those libraries. I think your library, Bobbin, and Winterfell was like the one project outside of StarkWare, also working on STARKs at the time.


[Guillermo Angeris] (5:00 - 5:01)
Oh, interesting.


[Bobbin Threadbare] (5:01 - 5:18)
And I think it was one of the few, I don't want to say the only one, but for sure one of the few open source STARK provers, because I think StarkWare prover was still closed source at the time. They've open sourced it.


But at the time, Winterfell was, I want to say, one of the very, very few open source STARK provers.


[Guillermo Angeris] (5:18 - 5:19)
This was 21, 20?


[Anna Rose] (5:19 - 5:19) 2021.


[Bobbin Threadbare] (5:19 - 7:01)
21, yeah. I think summer of 21, to be more precise. And it was actually pretty performant.


It was my, like the first STARK prover that I've written was written in JavaScript, which was a horrible idea to write a ZK-proving system in JavaScript. So like, this was my iteration on this.


I was like, okay, I'm going to write it in Rust. So like, actually, you know, it's useful and usable. And so it turned out actually to be pretty performant.


I think comparing back, like the performance of Winterfell is still on par now. There are faster provers now, but it's at the time, I think it was one of the fastest provers around. So this was like coming out of Facebook.


But the next thing I really wanted to do was the zkVM because STARK prover is one thing. And for me, and it goes back to kind of like, you know, how do people use ZK, right? Because at the time you had to hand code circuits and you need to understand a tonne of this.


And like, I wanted to work on zkVM and that was like my way of saying, okay, this is how we get the ZK into the hands of the masses because nobody really wants to write AIR constraints or R1CS constraints or whatever people want to write regular programmes. And so at the time in 2021, when we chatted, I was right about like released, I think, Miden VM v0.1, which was like the very, very first version of that. And yeah, since then, I think we had quite a few touch points.


Like I think we did the ZK Whiteboard series. We did the ZK Hack where I tried to like use Winterfell for kind of like introduce like some puzzles that people solved. You know, funny story about the hacks, like, you know, you try to put in, for example, some of the puzzles was where I wanted to put in like a missing constraint type of error and things like that.


And then people found this, but then people also found errors that I didn't want to put in.


[Anna Rose] (7:02 - 7:19)
A bug in the puzzle. Not the puzzle at the end of the, yeah, not the bug at the end of the puzzle, but a bug actually in the puzzle. I mean, it wasn't the only time that happened.


I think almost every year we've had like one sort of glitch on that front. That's awesome.


[Bobbin Threadbare] (7:19 - 8:30)
But within Polygon, I kept working. So like for about a year, I was working on the zkVM and kind of built a small team around it. I think you guys had grtje recently on the podcast, who was one of the early joiners and was working on the Miden VM at the time. So we already named it.


And then about a year into this, I came up with a blockchain protocol, which has now become Miden as the Miden blockchain, so to say. And I've been working on it ever since.


So like I've been working on that for almost three years, I would say, on the actual blockchain. So the zkVM was earlier and the blockchain happened like in, I want to say, late 2022 or something like that. Yeah, I mean, it was like a very interesting environment in Polygon.


There was like a very high concentration of talent, right? There was Polygon Zero, Polygon Hermes, one of the first zkEVMs to go in production, the Plonky3 development. So like it was an incredible time.


But yeah, more recently, though, I think, you know, I'm sure people have seen the news. We spun out of Polygon. I think it was really good to like experiment and research, but like bringing things to market requires a different mindset and a different environment.


So a couple of months ago, we spun Miden out of Polygon and now kind of are sailing independently, so to say.


[Anna Rose] (8:31 - 8:43)
Very cool. And I want to hear more about that transition and what's planned. But first, let's introduce Gaylord to the folks that don't know Gaylord.


Gaylord, you and I worked together until earlier this year.


[Gaylord Warner] (8:44 - 8:44)
Yes, we did, yeah.


[Anna Rose] (8:45 - 8:58)
And anyone who's been part of any ZK Hack events, the hackathons, the online events, the Discord channel, you're probably familiar with Gaylord. I feel like you joined the team. You joined my team in 2023.


[Gaylord Warner] (8:58 - 8:59)
Yeah, two years ago.


[Anna Rose] (8:59 - 9:27)
Yeah. And you really took ZK Hack from like a once in a while conversation on Discord to like a once in a while event to like a real community. So, yeah, I wanted to hear.


I mean, I kind of know this, but I think you might want to share with the audience a little bit of your backstory working at ZK Hack and then what your focus is on today. Also, I do want to just highlight that you are wearing. No one can see this because there's no video, but you have a ZK Hack hat and a ZK Hack shirt, which I very much appreciate.


[Gaylord Warner] (9:27 - 9:52)
It's not very audio friendly, but yeah, the audience can now picture me with my ZK Hack gear around. So yeah, before actually joining ZK Hack, I was for a long time a software developer in traditional finance. That's in another life when I was living in Japan, in Tokyo.


So, you know, everything was different. And then I decided to come back to Europe. I had heard of Web3, you know, in between.


That was right after DeFi summer, if people, you know, remember that.


[Anna Rose] (9:52 - 9:52) 2020.


[Gaylord Warner] (9:52 - 10:14)
Exactly.


So yeah, end of 2020, I'm coming back, getting curious about blockchain and Web3. And I somehow ended in kind of a very interesting place about artists. You know, we were talking about NFTs back then.


And I was the Web3 lead, that was the name, in this very nice, you know, warehouse with concerts and techno music. So very nice time.


[Anna Rose] (10:12 - 10:13)
You were in the vibe land.


OK.


[Guillermo Angeris] (10:14 - 10:14)
Yeah.


[Gaylord Warner] (10:14 - 10:17)
You know, after TradFi, I needed a clean break.


[Anna Rose] (10:17 - 10:18)
You had hard vibes.


[Guillermo Angeris] (10:18 - 10:20)
And you needed like an antidote for a long time, you know.


[Gaylord Warner] (10:20 - 10:26)
Kind of. Funnily enough, though, that's where I've met with Tanya, a member of the ZK Podcast team.


[Anna Rose] (10:26 - 10:42)
Yeah.


And Tanya, who people know as she was the podcast producer in the past, and also she's the voice of the ads that we sometimes have on the show. And she introduced me to you, Gaylord, and was like, I have this friend. He has the background you might need for something like ZK Hack.


[Gaylord Warner] (10:42 - 10:54)
Exactly. And actually, that happened right after my discovery of ZK, which mostly happened via ZK Hack Lisbon, the event you guys have been mentioning. I was a participant in ZK Hack Lisbon.


[Anna Rose] (10:54 - 10:56)
He won Hacker's Choice.


[Gaylord Warner] (10:56 - 12:09)
I won Hacker's Choice with my Fruity Friend's idea, kind of a weird dating app concept, which was actually done with the now co-founder of ZKPassport, by the way. So, you know, ZK Hack Lisbon is something that really, that was kind of a legendary event where, I mean, a lot of people actually who passed by the podcast went there, the ZKP2P guys, even like Tonk Labs. I think Goblin Oats was there as well.


So, yeah. And then after six months of hackathoning, I joined the team at ZK Hack where, yeah, as you explained, the mission was really growing the ecosystem. Also, the interest in ZK was, you know, more newer.


So people were really into discovering ZK, experiencing with it. And it was harder than it is now as well. So, yeah, I mean, you know, you know about that, obviously, but we had a lot of fun organising the hackathon, the study, study groups with Guillermo, actually, we had one.


We also had Miden. So, yeah, it's all like the whole group all together. And yeah, I've joined the Miden a few months ago, basically together with the spin-out announcement that Bobbin just mentioned.


So, yeah, it's been a ride, changing roles, you know, from time to time. But yeah, it's been very fun so far.


[Anna Rose] (12:09 - 12:13)
And we miss you over at ZK Hack, although we also still see you over at ZK Hack.


[Gaylord Warner] (12:13 - 12:17)
I do miss you, but I mean, I'm still in a lot of chats, so I see what's happening.


[Anna Rose] (12:17 - 12:26)
Agreed. Also helping us a little with ZK Mesh on the side. Yeah, very much appreciate.


And you were the host of the recent ZK Hack Berlin, our latest hackathon.


[Gaylord Warner] (12:26 - 12:47)
Yes, it was really, really great. I mean, it was a great event, you know, packed with people. The project was awesome.


Actually, I encourage people to check it out. I mean, I always find the ZK Hack project awesome, to be honest. But yeah, in Berlin, I feel like it was probably the best in terms of quantity and quality.


You know, we always have quality, but this time it was also quantity. So yeah, quite impressive hack.


[Anna Rose] (12:47 - 13:08)
I mean, you being part of ZK Hack hackathon from that starting point of Lisbon, you were at all of them because you were a participant in Lisbon and then behind the scenes for Istanbul, Krakow, Montreal and Berlin. And I also felt like Berlin, I mean, it's some of the best. We had Nico, co-host of the show, hacking.


We had the Powdr team hacking.


[Gaylord Warner] (13:08 - 13:10)
It's a small world. It's a small world.


[Anna Rose] (13:10 - 13:16)
We had Ying Tong hacking. We had these amazing, you know, practitioners being part of the hacking community.


[Gaylord Warner] (13:16 - 13:33)
But also, you know, this young kid who just invented this anti-cheat software and he came second. So you have this, yeah, the OGs, I would say, but you also always have some new people flowing in. And that's what I love about ZK Hack hackathons.


You always have new faces and you see the enthusiasm. It's really great.


[Anna Rose] (13:33 - 13:54)
It's been fun to do.


OK, so let's jump into Miden, the topic of today's show. Like you've just mentioned, Bobbin, sort of the advent of Miden, but I think we should define like what Miden actually is.


What is it as a zkVM? What makes it different? You sort of mentioned a blockchain.


Is it an L2? I'm curious, like, yeah, how do you define Miden today?


[Bobbin Threadbare] (13:55 - 16:49)
Miden term is somewhat ambiguous and maybe we should have picked different names for different things because it refers to Miden VM, right? So it's an independent thing that is kind of a zkVM that is not a RISC-V VM. It's not EVM.


It's its own instruction set. And we have kind of like good reasons, I think, for going that route. But it is like it is basically a different zkVM that you can write programmes using Rust in and it kind of executes these programmes. But, you know, it doesn't adhere to established instructions set architecture.


The Miden blockchain itself is kind of a blockchain protocol that, as I mentioned, I kind of like I first authored and it changed a lot since then. But the first kind of like idea was about three years ago.


And it is an L2, like we're going to market as an L2. It is going to be actually a centralised L2 and I can talk about kind of the rationale for that. But going to the core of it, it's kind of like when I was thinking about, you know, what the zkVM could be used for.


And this was actually I was actually always kind of developing zkVM with this use case, at least one use case in mind. And this use case was to use it in the context of blockchains. Even if you like go back, the first post I made about zkVMs, I think was like in, I want to say 2020 on like ETH research forums where I was like, hey, I think I have an idea for zkVM, but I think it could be used in a blockchain context.


So it was always kind of in the back of my mind of how can we use this. But kind of the bigger thing for me was I saw a few issues with blockchains, to be honest, like from the, you know, I got involved in blockchains and with blockchains like in 2018. But the two main things that always bothered me was the scalability aspect, where I just didn't think you could handle like thousands and thousands of transactions and still be like true to the blockchain, kind of like original principle, so to say.


And the second one was privacy, because for this to work in my mind, like the privacy is an absolute must. You don't want to live in a dystopian world where, you know, transaction history and basically entire life is traceable for anyone who has internet access. And so for me, kind of the journey to get to this like design of the blockchain was to figure out how we can solve both scalability and privacy at the same time.


And zkVM was one of those things that I thought was required. And at the point when I said, OK, now I have a zkVM to play with, like, what can I do? How can I build a blockchain out of it?


And here, like one of the things that I remember, like even writing that blog post like about three years ago about how like I want the blockchain to work and what are the main principles. For me, it was like I didn't want to add this to an existing chain because all the existing chains were kind of designed with kind of like some limitations. They didn't know about ZK at the time.


Right. So like Bitcoin, Ethereum and basically almost every other chain was maybe a few exceptions were built with the kind of presumption that you need to re-execute transactions to have a running blockchain. And that imposed quite a few limitations on the design.


And here I was like, yeah, I have ZK. How would I design a blockchain if like I started from the ground up?


[Anna Rose] (16:49 - 16:50)
You knew ZK, huh.


[Bobbin Threadbare] (16:50 - 18:08)
And so a couple of principles that I had at the time for Miden, which I think I realised most of them, except for maybe one.


One of the principles was I wanted to have parallel transaction execution where people could execute transaction independently of each other. You don't have the sequential execution where one transaction needs to be executed after another, because, you know, again, if you can execute a thousand or ten thousand transactions in parallel and that can be done by, you know, ideally by people who actually want to execute those transactions, that's a clear path to scalability.


The second one was privacy. As I said, I want to have privacy to make sure that, you know, it doesn't have to be only private, but it had to allow people to be private. And it should have. Like one of the principles I want to make sure is that the privacy was incentivised somehow so that you wouldn't have to pay more to be private.


You would actually have to pay less to be private and you would have to be paying more to be public. And that was like another thing. And the third thing, I wanted to have smart contracts to make sure like I didn't want to have something that, you know, just payments, because for very cool applications, people come up with like different things.


So like I didn't want to have smart contracts on here. I think there were two things, like one of the things I wanted to make it EVM compatible, which I wasn't able to do in the end. So that was one of the things that kind of got thrown out because I couldn't figure out how to make like smart contracts private and EVM compatible.


[Anna Rose] (18:08 - Yul:10)
If they're like Solidity based and stuff.


[Bobbin Threadbare] (18:10 - 19:47)
Yup, yup.


So that was kind of on smart contracts. Those were the main principles. And like I think the next one is kind of a smaller one. I also, from a scalability standpoint, was trying to figure out how do we make it so that, you know, the state of the blockchain doesn't grow too much.


Right. Because execution is one of the issues, like you don't want to execute transactions kind of sequentially. But another issue is like this state is ever growing.


And how can you minimise it? Otherwise, you know, your state goes into terabytes or dozens of terabytes. And that's also kind of against principles of decentralisation, so to say.


So with those kind of principles in mind, I was, OK, let's design Miden from the ground up. We kind of like iterated a few times on this. We came up with this marketing term, the edge blockchain, where the idea is that you can move both execution and state to the edges.


And it's kind of like play on client side proving, I guess, but a bit more than that, because the idea is that both execution or most of the execution happens on user devices and also most of the state is stored on user devices. And so kind of like a nice term for that was edge, because this is also popular in other industries. And we thought it could be a good description.


We'll see if it takes off or not. But yeah, so like Miden, we call this edge blockchain where users can execute their own transactions. They can send proofs to the network and the network verifies those proofs.


Users can also store their own state. They only can send commitments to the state, to the network. That comes with its own tradeoffs, the other challenges and benefits.


And then we also have this notion of like public and private. So you can have like network accounts that are public, that are maintained by the network, where you can have like a AMM running, for example, or something more traditional. And you can have this private accounts interacting with public AMMs and so on and so forth.


[Anna Rose] (19:48 - 19:57)
Were all of these ideas already formed end of 2022? Or are you describing like things that have come since 2022 and like you've started to explore?


[Bobbin Threadbare] (19:57 - 20:31)
I think the principles and like the goals were there in 2022. Obviously, the design changed quite a bit since then. Like, you know, if I go read the initial post that I wrote about it as maybe half of it is still like relevant and the other half is OK, this doesn't work in this way anymore.


We've changed things. But I mean, this is like you also don't know that like when you describe things at the high level, it feels OK, this is simple. But then once you start getting into details, it's like, OK, there are tradeoffs everywhere.


And like if you do this, then you can't do that. And, you know, you have to figure out how to deal with those tradeoffs and then dealing those tradeoffs like the design naturally changes.


[Anna Rose] (20:32 - 20:32)
Got it.


[Guillermo Angeris] (20:32 - 21:40)
I have like a gazillion questions. I mean, these are all like very, very cool things and ideas.


And like, trust me, you know, you don't have to like threaten me with a good time type of thing, because I love this stuff. It's like catnip, like I'll crush it up and snort it any day.


So I guess to start, actually, one of the things that I've always found very fun and interesting, specifically here is you guys actually built your own ISA, your own instruction set.


And it's always been clear to me that like, you know, right now we spend a lot of time retrofitting ZK proofs to like ISAs that like we know and love. And the reason why is because there's a bunch of like developer tooling that compiles down to standard ISAs like RISC-V or EVM, which is an even worse version of that and so on and so forth. So I guess, first things first, philosophically, why do your own ISA?


I obviously have a lot of thoughts about this, but specifically, I want to get your thoughts on it. Number two is how does it differ? Like why, you know, not just why build your own ISA, but like, what do you get from it?


And like, how does it differ from like, you know, what most people might know? Or most is a strong term, but like some people might know, like RISC-V or something like that.


[Bobbin Threadbare] (21:40 - 23:17)
Yeah, yeah, definitely. So I think there are a couple of answers to that. One of the answers is that at the time when I started building Miden VM, I didn't actually think you could do like something like zkVM or RISC-V efficiently.


So that was one of the first things I was like, okay, like this is not going to be practical, especially if you want to do proofs on the client side, you won't be able to do those proofs in any reasonable amount of time. And so it was kind of, I need a different VM that can run in the browser and that can generate proofs like on a smartphone or something like that. So like, that was one of the reasons.


I mean, I think we will get there, to be honest, like with RISC-V and others. We're probably, I mean, we're kind of close to this now. I think they still like require fairly large machines to generate proofs and all that stuff.


But two, three years down the road, maybe a bit more, I don't know, like you will be able to run RISC-V on your phone, I think. I mean, technology moves pretty quickly. So that reason, I'm not sure it's as valid anymore, because I think you can make it work from a performance standpoint.


Although I would say like Miden is very lean, especially like as a VM, if you run it in a browser, you can generate proofs fairly quickly and all that stuff.


The other thing, though, was like this different feature sets that I wanted to have that were specifically for blockchain purposes. And some of them you may say maybe there's a way to emulate with more traditional ISAs.


Although at that point in time, like it's a question of does it actually, you know, is it still a traditional ISA if you add a whole bunch of like specific things to it? Like one of the things I knew, for example, we wanted to do is like, and this is like very simple example, verifying Merkle proofs, because I knew Merkle proofs verification was going to be like a very important thing in the context of blockchain. So we have an instruction that verifies a Merkle proof in a single cycle.


It like abstracts that away. But there is an instruction in the VM that does it in a single cycle.


[Guillermo Angeris] (23:18 - 23:21)
This is the RISC-V, you know, blockchain extension.


[Bobbin Threadbare] (23:21 - 24:01)
Exactly. If you can do RISC-V blockchain extension, those are the type of instructions that you would want to add, I think. Right.


Then the other thing that was important is like built in context separation, which we use a lot. Like there's actually the way Miden VM is designed is that there's like privileged memory spaces versus unprivileged ones. And, you know, you kind of can get some of that with traditional architectures, but this is like built in the VM level where you can't write from like if you're making a contract call, the contract call can go back to the previous contract and write into the memory.


And like there is it enforced not at the compiler level, but at the VM level itself. So there is like this context execution, context separation that we rely on quite a bit.


[Guillermo Angeris] (24:01 - 24:20)
So kind of like also as part of the ISA slash like VM, you're also writing like a mini operating system, which is like roughly keeping track of, you know, like access and privilege in different places or whatever, which is kind of interesting. Okay. And it's just like baked directly into the VM.


It's like a hypervisor style thing or something, except like.


[Bobbin Threadbare] (24:20 - 24:38)
Yes, yes. I mean, I think we didn't go all the way, although if I can figure out how to make it work on a constraint level, I would love to go there. But there's like actual like the resource model where you can borrow resources and do all kinds of things.


It's not quite as sophisticated, but it's like it's quite a few steps in that direction where you kind of can emulate those things relatively easily.


[Guillermo Angeris] (24:39 - 24:39)
Very cool.


[Bobbin Threadbare] (24:40 - 25:49)
And a third thing is the way we commit to programmes, which is very unique and I think is useful in the context of blockchain. And I wonder if like somebody will actually use it in different contexts is that like my VM is not a Von Neumann machine. There is no programme counter.


There is no kind of like programme written in memory. What we have is a merkelized abstract syntax tree. And the way you execute the programme is you traverse that tree.


What this means is every node in that tree is a commitment to a programme under it. And so what you can do is, first of all, what this allows you to do is unambiguously commit to a programme that you want to execute. So like you would say, OK, this is the root of my, this is a commitment to a programme.


And it is fully described like the Merkle tree and it describes the programme and this is a commitment. But you can also think about like calling other functions. How do you call another function in a traditional VM?


You call it by reference, right? In Miden VM, you call it by hash. You specify the hash of that node that you want to execute and it makes a call.


So it unambiguously says this is the programme I will execute when I make this call. You can't modify that programme at all. Like it's cryptographically fixed, which is useful when you have like a contract and the contract commits to a specific code.


And this code, like, you know, like you can modify this code without changing the commitment to the programme.


[Guillermo Angeris] (25:49 - 27:10)
So essentially, like you can think of. So in Miden , OK, sorry, we're going to get into like the nerd version of this, but I'm still curious. So in Miden, a programme is essentially like a pure function that exists like in the wild, right?


And like, yeah, I can reference some data, but fundamentally, the pure function is uniquely specified by like the literal, like abstract syntax tree of the underlying programme. So when you execute the thing, you're just like, OK, sir, please go and like open up each leaf of these things, execute the like, step, in between. And then at every point, like you've just essentially like the proof now is like, have you opened up all these and executed each thing and, you know, in sequence, sequential order or something like that.


And then there's a secondary point, which is like, OK, now you need to like hook that up to some data. But the data is like external to the programme, right? It's like the programme itself is like just some function takes in some abstract arguments, output some abstract whatever thing with a proof.


The arguments themselves have this like sick thing, which are like great, like that's lives somewhere on the blockchain somewhere, which I have a question about how you even point to that data, but like whatever. But that's fine. Like, all we're doing is just like, please give me the hash for the programme.


I'll go execute it on this data. And like, you're totally good. You don't need to do all this interesting things with smart contracts, which like you have to have different smart contracts.


If you have a factory of them and you have like weird things that like you have to proven that you've correctly done, it just like gets very, very complicated.


OK, very interesting. Very cool.


[Bobbin Threadbare] (27:10 - 27:24)
Another thing about this is like it's basically content addressable programming. If you think like IPFS, it's content addressable data.


This is the same thing. You have content addressable programming where a hash like has a programme under it and you look up a programme by its hash.


[Guillermo Angeris] (27:24 - 27:35)
Right.


And you can also compose programmes quite easily, too, because like a programme inside can call like another programme hash somewhere. Right. And then you just prove the correct execution of that.


And then like you just like return back to the caller.


[Bobbin Threadbare] (27:35 - 27:56)
There is another nice property to this, which I don't think you can easily get with other approaches, is where you can selectively reveal different parts of the programme without revealing the rest of the programme. So I can open up a single leaf or a subtree and show you that this is my part of the programme without showing the rest of the programme. So it kind of allows me to keep part of the programme private while showing you that the other part of the programme.


[Guillermo Angeris] (27:56 - 28:09)
Also, it probably makes it cheaper. Right. Because in a lot of cases, if you have a very big branching programme, there's a bunch of branches you probably never traverse.


Right. So you only have to open the things that like actually get executed inside of the succinct proof.


[Bobbin Threadbare] (28:10 - 28:25)
Yep. That was one of the original design rationales for this. I was like you have a big smart contract, but at any given transaction maybe executes like, you know, five or 10 percent of the code in there.


Like we don't need to unhash the entire programme to be able to execute a few functions out of it.


[Anna Rose] (28:26 - 28:43)
I want to do a bit of a throwback to what you had said earlier and also the earlier work. I'm curious for the Miden blockchain. Is it still STARKs under the hood?


Does it use Winterfell? Or is that sort of like left behind? Is that the ISA?


That's kind of what I'm trying to figure out.


[Bobbin Threadbare] (28:44 - 29:01)
Yeah. So it is STARKs under the hood, although I should say I'm not married to a specific proving system. So like maybe we'll get into this later.


But like I would actually sleep better at night if I knew that there's two independent proving systems proving Miden VM. And there is no like maybe it's STARKs and Ligero. Maybe it's something else.


Maybe it's Binius somewhere in there.


[Guillermo Angeris] (29:01 - 29:02)
Ligerito?


[Bobbin Threadbare] (29:03 - 29:56)
Yes.


But overall, it is using STARKs for now. It is actually using Winterfell still, but we are in the process of moving this to Plonky3. To be perfectly honest, like I didn't invest a lot of time and effort into Winterfell over the last three years.


And so it is roughly at a state where it was like three years ago. And at the time, it was one of the best proving systems in terms of speed and others. But now there are better things out there.


And so we're kind of like hopefully by like November's time frame, we'll be on Plonky3, depending on how the migration goes. I think one of the challenges there is to make sure that Plonky3 is actually faster than Winterfell in the aspects that we want it to be, because we're still using the Goldilocks field. And so Plonky3 is very well optimised for 32-bit fields, but it's not as well optimised, I think, for Goldilocks fields.


And in the process of this migration, we'll figure out either how to make Plonky3 as fast or come up with some other solution.


[Guillermo Angeris] (29:56 - 29:58)
Goldilocks is what, 64-bits or something?


[Bobbin Threadbare] (29:58 - 29:59)
Yeah, it's 64-bits.


[Anna Rose] (29:59 - 30:09)
It's funny, even asking that question of like, is it STARKs? Because we've sort of on the show realised that STARKs and Snarks are kind of intertwined. I almost wonder, like, is it FRI?


[Bobbin Threadbare] (30:09 - 30:10)
Yes, it is.


[Anna Rose] (30:10 - 30:21)
Are you actually looking at the FRI alternatives as well? I don't know what's in Plonky3, so I don't know if that's already been experimented with, like that WHIR or STIR, or these new things are being also used.


[Bobbin Threadbare] (30:22 - 30:49)
They're definitely interesting. I don't think we've experimented with them seriously enough yet. Plonky3 has this twist on FRI where it's like a multi-table commitment scheme, which is still using FRI, but you can kind of slide in different tables at the different levels of FRI.


We may not end up using that. There is another, I think there was a presentation that at the last ZK Summit about lifted FRI. We may go with that direction, which is allowing us to achieve the same goal of multi-tables, but using still fairly simple FRI.


[Guillermo Angeris] (30:49 - 30:56)
I think for what it's worth, World is working on a WHIR Plonky3 implementation. So that might also be of interest.


[Bobbin Threadbare] (30:56 - 31:50)
That could be very cool as well, because one of the things we try to minimise, and I didn't mention this, but like in a kind of description of differences of Miden versus others is one of the things we try to reduce really is the proof size, right? If you run a lot of other proving systems, you get proofs that are a couple of hundred kilobytes, sometimes even go into megabytes, depending on which, even STARK-based ones, because on the server, it doesn't really matter what the proof size is, right? You send it to be recursively aggregated into another server that is next to you.


And so it doesn't really matter for us because we want to do client-side proving. We want to keep proof sizes small. And so for Miden VM right now, a transaction proof is still fairly large.


It's somewhere around like 80 or 60 kilobytes, maybe like, you know, depends on what exactly you're proving, but it's definitely under 100 kilobytes. And with WHIR or STIR, you can, you know, if we can bring it down to, let's say, 60, 50 or under 50 kilobytes, that would be a clear win. So like that is definitely an interesting thing to explore.


[Guillermo Angeris] (31:50 - 32:00)
Yeah, I think at 50 or 60 kilobytes, I think essentially you're like standard Ligero territory. I think we'll actually be about as good, if not better.


But maybe not, we need to actually like work out the...


[Anna Rose] (32:00 - 32:36)
To continue on that language question, though, and the ISA question. So you're saying like Winterfell getting switched out eventually for Plonky3. But I'm actually not clear, like, is Plonky3 Rust?


Like, what's the language then? Like, is it its own ISA? Like, I thought of RISC Zero and their first sort of zkVM pitch coming, by the way, after yours.


I think for me, at least, the zkVM concept was like, you got you. And I guess Cairo was also kind of a VM, but like, I don't think they used that term back then. Or Cairo Starknet, all that.


But yeah, going back to the language, like, yeah, what is the ISA?


[Bobbin Threadbare] (32:37 - 33:24)
So Plonky3 is written in Rust, but like, technically, there is no ISA for Plonky3, right? Plonky3 is a toolkit that you use to build like the other provers. Yeah.


I mean, the circuits, they have their Rust way of like, I think they call it AIR builder, that approach that you encode the constraints. But you can build any ISA on top of it. So when we talk about ISA, I'm talking about zkVM specifically.


So you could have Miden, you could have SP1, you could, you know, RISC Zero could have used Plonky3. I think they have a different proving system under the hood, but the EVM could, you know, the ISA of the VM doesn't matter. Like the proving system is kind of like, it sits at a different level in my mind.


We don't need to change the ISA of the VM to go from Winterfell to Plonky3. Things under the hood will change, but as far as the user is concerned, it will look the same.


[Guillermo Angeris] (33:24 - 33:43)
Right. You can think of it as like programming language compiles through a compiler to ISA. ISA then gets like executed in big quotes by like virtual machine, which is itself then proven to have correctly executed by a succinct proof system.


[Anna Rose] (33:43 - 33:43)
Like Plonky3.


[Guillermo Angeris] (33:43 - 34:03)
Exactly. And so, and any of these things can just kind of be like modularly replaced with something else that like does not change the, you can think of these as having like interfaces between each of these steps and they're all like consistent.


So changing the mechanics of how one works doesn't, should not change the like exact things. Obviously, like in practise, there's sometimes a little bit more intertwined, but like, you know.


[Bobbin Threadbare] (34:04 - 35:02)
I think by the way, one thing about languages I want to bring up is that at the very top of this chain that Guillermo described, it sits like, which language do you code in? Because, you know, if you think about like what the actual user sees, and that's why RISC-V is very popular, because you can just take Rust or, you know, C and you can compile it and all the tool changes remains the same.


You just run it like you code in the familiar language. And that's like the big appeal. On the other hand, you have other systems, you know, you brought up Cairo, for example.


Cairo has its own language that they've developed. And, you know, it's similar to Rust in many ways, but it is a different language. So you kind of use something different and, you know, similar other projects have different approaches to solving this.


With Miden, what we've done is even though we have a different ISA, we are targeting Rust as a primary compiler, like language in which people write programmes and smart contracts. And so what we do is we have a compiler that takes the Rust programme, compiles it down to WebAssembly, and then we transpile WebAssembly into Miden assembly.


[Gaylord Warner] (35:03 - 35:50)
Yeah, this is actually a part that's quite important for my job, actually. Because since I'm talking to the builders, if you don't do that, if you don't have the Rust compiler, that means you have to use this language called Miden assembly to write your smart contract. And it's not as bad as it sounds, but still, it's not as easy as writing Rust.


So yeah, what Bobbin is explaining is like Rust as an entry point for the smart contract language is so much easy, you know, as a sell for the builders. It doesn't mean Miden assembly would not exist, but you should see that as the Yul of the EVMs, whereas the Rust is our Solidity kind of. So yeah, we still have this kind of optimised language for the VM called Miden assembly, but the Rust compiler allows you to skip that part if you just want to write some Rust and don't need this hyper optimisation that you would get with Miden.


[Anna Rose] (35:50 - 36:00)
Okay. And actually this was the question because we were talking about all of these zkVMs. Apparently, according to an episode I recently did with Justin Drake, there are 32 zkVMs.


[Gaylord Warner] (36:00 - 36:00)
That's true.


[Anna Rose] (36:00 - 36:26)
Crazy.


But a lot of them using the RISC-V ISA, which has always been one of the selling points is always like, and then you can just write Rust. But it sounds like for Miden, you also can just write Rust. It's not like that's a real differentiation, but there is this Miden assembly that would be, I guess, closer to the bare metal, like just like a bit more.


[Gaylord Warner] (36:27 - 36:37)
It's funny because you say, yeah, I mean, we say "masm" and then you have wasm, but because wasm is the intermediary, I mean, it's technically Rust to wasm to masm to the VM.


[Guillermo Angeris] (36:38 - 36:38)
Okay. These are the steps.


[Gaylord Warner] (36:39 - 36:42)
So it makes sense that you mix them up.


[Guillermo Angeris] (36:42 - 37:13)
So wait, for the VM, do you compile wasm directly to, like, I assume masm is the VM like ISA, or is there a lightweight VM running on top of Miden VM, which executes masm? Right. Because wasm itself is obviously not like a, it kind of gets compiled to like real source code, like under the hood, be ahead of time, slash design compilation, but like not real.


I mean, it's still like its own thing. That's like separate. And I kind of even think it was like a mini VM that gets executed in like a container inside of your, like, you know, Safari or whatever.


[Bobbin Threadbare] (37:13 - 37:35)
So Miden assembly is basically an ISA for the VM itself. So, but there is a small translation step that is happening because like we added some syntactic sugar to Miden assembly to make it a bit easier to code that like gets translated, but translation is trivial. So there's an assembler that takes it and translates it into the, what we call a MAST, Mercalized Abstract Syntax Trees.


[Guillermo Angeris] (37:36 - 37:36)
Oh my god.


[Anna Rose] (37:36 - 37:37)
Because...


[Bobbin Threadbare] (37:37 - 37:41)
wasm, masm, MAST. wasm, masm, MAST. Yes, yes, yes, exactly.


[Anna Rose] (37:42 - 37:44)
Rust at the top. Yeah.


[Bobbin Threadbare] (37:44 - 38:01)
Yeah, so true. Like if you, if you think like Miden assembly is roughly at the level of Yul in terms of like, if you can think, it's not like x86 assembly where you deal with like way lower level. So Miden assembly is like at the level of Yul, kind of, you have like a control flow, you know, like there's a while loop, for example, you can write.


[Gaylord Warner] (38:01 - 38:14)
That's what I meant. It's not that bad. I mean, it's called, assembly is a very poorly chosen name, by the way.


It's very bad publicity, but it's not like, you're not writing assembly. Miden assembly is, as Bobbin said, it's, it's not that bad. It's a bit easier.


It's still stacked, but it's easier.


[Bobbin Threadbare] (38:14 - 38:47)
It's still unpleasant to code in, it's still unpleasant to code. Rust is much better.


And actually, by the time I think this episode comes out, we'll have a blog post because just week we released the first version of the compiler that was able to compile smart contracts written in Rust into and execute them on Miden. Before that, we had like pure Rust programmes where you would just take a pure Rust programme and be able to compile it and run it on Miden VM.


But now we actually have the concept of smart contracts. I mean, there's still a lot of work left, but that was the first version where you could end-to-end write a smart contract in Rust and compile it and run it on Miden testnet.


[Gaylord Warner] (38:47 - 38:50)
Yeah. Now we really have to release it because you just announced it.


[Anna Rose] (38:51 - 39:06)
There's no way back. You have a couple of weeks. So I kind of want to throw back to what prompted....


This is something I had actually meant to mention a little earlier in the episode, but there was an episode that we did, Guillermo, you and I with Muthu.


[Guillermo Angeris] (39:07 - 39:07)
That's right.


[Anna Rose] (39:07 - 39:25)
We were talking about Ligero and the concept of Ethproofs came up. This is before my episode with Justin. So I'll link to both of those in the show notes.


But I think Guillermo, you had some hot takes about EVM and the issues. I know you've already just talked a little bit about some of those challenges, but this prompted, Gaylord, you to weigh in.


[Gaylord Warner] (39:25 - 39:27)
Yeah, I actually posted, yeah.


[Anna Rose] (39:27 - 39:56)
Yeah. I want to just talk a little though. Right now we're talking about this Rust line through, but is there an improvement over EVM?


Do you think you will actually have EVM support? I'm just, I want to kind of bring up that question of EVM, especially because in my interview with Justin, you know, Ethproofs, this effort to coordinate a lot of zkVMs together, they still have at their heart EVM. And you guys are not doing that.


And so this is where I'm wondering, like, how does that all work?


[Gaylord Warner] (39:56 - 40:36)
I see, that for context. I mean, I hope he doesn't mind. But yeah, Justin is kind of coercing anybody building a zkVM to prove Ethereum blocks.


So, you know, he did that to us. And, you know, it's cool. That's one of the use case, but you know, you can do other things with the zkVM.


But yeah, just to give the short history, I think, yeah, I posted right after listening to the Ligero episode which was a few weeks after it came out, you know, because Guillermo was ranting about, you know, how blockchain should be built. And it also reminded me of a bunch of rants he did a few months ago, which I just checked again for this episode. So actually, originally, I think you published this blog post, which is literally called like how blockchain should work or something like this.


[Guillermo Angeris] (40:36 - 40:36)
Oh, yeah.


[Gaylord Warner] (40:36 - 40:53)
So where you had a few ideas about how we should build a blockchain in 2025. And yeah, it kind of made me think of Miden where we, you know, we built it from the first principle, very differently to what the EVM looks like. So, yeah, I think that was also how this episode, I guess, came to be.


[Anna Rose] (40:53 - 40:53)
Very cool.


[Bobbin Threadbare] (40:53 - 41:27)
There are kind of like actually a lot of other overlaps. You had grtje and Goblin Oats recently about talking about local-first. And yeah, in a way the edge blockchain is kind of like, I mean, it's a different thing, but it is local-first where you store things locally.


And you don't want to rely on some, you know, the cloud, in this case, a network as much as you do now with the most of blockchain design. So like you're pushing the data to the edges and the user should be kind of autonomously managing their own data. There is no reason why the state of my account should live on a public blockchain.


I should hold that state myself.


[Anna Rose] (41:28 - 41:46)
I like that.


That's funny. I'm going to link to all of these episodes. But I do want to kind of continue on this sort of EVM comparison and just like go a little deeper on what did you do that does fit maybe what Guillermo had suggested in terms of like an optimised blockchain?


And what have you not done yet? Like, what are the limitations that are harder to do?


[Bobbin Threadbare] (41:47 - 41:57)
Talking about EVM specifically, there is like, Miden can execute Rust. And with a little bit of work, we can get like running Reth or something and proving EVM blocks, whether that's the best use case for Miden is a question.


[Anna Rose] (41:58 - 42:00)
It's not optimised for that, I guess?


[Bobbin Threadbare] (42:00 - 42:32)
Not, I mean, you could optimise it by doing pre-compiles and all of that stuff. So you could get there and it may be relatively performant. But again, I think the core design of Miden was not to do something like that.


It was to support this architecture of, you know, like the way the blockchain, the Miden blockchain is designed is by this. And I'm going to get into this design of the chain itself, like the differences. It's actually not an account-based system and it's not a UTXO-based system.


It's a combination of both. It's kind of like a mix. Like, yeah, people sometimes say, like, if Bitcoin and Ethereum were to have a baby, it could look like Miden.


[Anna Rose] (42:33 - 42:49)
Okay.


Wait, I have one side before you dive deeper into this architecture. You used to work with the Facebook team and, you know, Sui also came out of that. And I wonder if there was like any similarities between, we've had Kostas on the show to talk about Sui.


They have all sorts of like unique blockchain stuff. Did that influence at all Miden?


[Bobbin Threadbare] (42:49 - 43:41)
For sure, there was some influence. What I like about Sui and Aptos and like a lot of the Move-based things is the kind of the concept of, there are a few things like there is an object model in Sui, for example, which I've tried to like somewhat emulate in Miden as well. It's not one-to-one, there are differences, but like the concept of nodes and like accounts and like you have objects in Sui and we would like to actually move more into that direction.


There are limitations in the ZK side why it's, you know, I wasn't able to figure out how to support full object model, but like the idea of that is really cool. And I think we'll try to move more into that direction. The other thing like that comes with Move is this resource management, like you have resources at the base level of in the language itself.


And I think this is super important for safety and other reasons. And so again, we kind of emulated this, we can't run the full Move because again, it's more complicated and we just...


[Anna Rose] (43:41 - 43:44)
They're not using ZK in the base chain in the same way.


[Bobbin Threadbare] (43:44 - 43:55)
They're not. Yeah. But I think this is really cool concept.


And again, we have some parts of that where one of the things, for example, in Miden and diving deeper is that there is no native asset, there is no like ETH on Ethereum or Bitcoin.


[Anna Rose] (43:55 - 43:56)
There's no gas token.


[Bobbin Threadbare] (43:56 - 45:06)
I mean, you could use anything for gas.


I mean, there is like, I'm not going to go too much into the details, but you can have many assets and they look as if they're native. So like you can create assets and you don't need to have a special smart contract like on Ethereum, like you have a native ETH, but everything else is a smart contract. Here you can have native assets and they move through the system in a way where an account has a full ownership record of all the assets it owns.


It doesn't need to look into other accounts to figure out like, do I own this or do I not own this? And this is important for making things local-first and taking them to the edge, because if you have some global smart contract recording ownership of all assets, then you can't take your account off chain because somebody else has to keep track of what you own. And it also creates like a lot of issues with sequential execution, because, you know, if I need to update, like if I'm transferring USDC to Gaylord and then Gaylord transfers it to you, Anna, like we can't do it in parallel because we have to update the same exact account on Ethereum, while in theory we should be able to send like, you know, two independent transfers could happen independently.


And, you know, if you have assets as a core primitive at the protocol level, then it makes things much simpler.


[Anna Rose] (45:07 - 45:23)
I want to go back to, you were actually explaining the architecture. I think we've gotten little pieces of it through this. Thank you for answering that question.


Yeah, I just, I figured like you guys work together. Maybe there was some similarity there. But yeah, keep going with the sort of how Miden's architecture looks.


You're about to dive in there.


[Bobbin Threadbare] (45:23 - 46:19)
Yeah. So on Miden, we have both accounts and UTXO, we call them notes. Actually, I would say the inspiration came more from Zcash than from Bitcoin.


So we have like concept of notes and nullifiers, but we also have concept of accounts as the first class citizens. And so the accounts look very similar to Ethereum accounts, Ethereum smart contracts, I should say. So every account is a smart contract.


So it has code, it has storage. And unlike Ethereum, every account, as I mentioned, has the full ownership record of what the assets that its own. So if you have a USDC or ETH or USDT or whatever, it's all recorded inside of your account.


And the way accounts communicate with each other is by passing notes, the messages, and this is where the UTXO part comes in. So if I want to send, you know, some USDC to Gaylord, for example, I would create a node that takes the USDC out of my account. And there's a now UTXO living on the chain.


And then Gaylord can consume this UTXO later on to claim the funds and move it into his account later on.


[Gaylord Warner] (46:19 - 46:19)
Getting rich.


[Bobbin Threadbare] (46:20 - 47:38)
Yeah. And like this separation allows me kind of to update my state of my account independently from Gaylord updating state of his account and execute this transaction separately from each other. So both allows for parallelism and privacy.


Privacy because like I don't need to know state of Gaylord's account to send him funds. I just create this UTXO node and then he can consume it. And then parallelism because like, you know, me sending funds updates only my account.


But if you are sending funds to Gaylord or to Guillermo at the same time, you update only your account. And so you don't need to update multiple accounts simultaneously. And so this is like a very different model.


And this is also why making it work with EVM was like challenging to say the least. I couldn't figure out how to make this work in EVM because there are conceptually very different ways to programme this. You create nodes, the nodes get consumed.


It's actually not a new paradigm. It's like it's called what actor-based systems. It's an actor model where, you know, there are programming languages like Erlang and others that work on actor-based systems where the way it works is like, you know, you have actors that are accountants in our case and they send notes to each other, messages to each other and other actors react based on receiving those messages.


And we just apply the actor model to, you know, sprinkle some ZK on top of it and apply it to blockchain. So that is kind of like a way to describe it.


[Gaylord Warner] (47:38 - 48:21)
It's actually, I mean, I literally had a workshop yesterday onboarding builders and this is exactly how I explained it. So I first explained the actor model, which is just, you know, concurrent computational model. So you have the actors, they all have like a mailbox.


And then when you communicate between each other, you just send a message to someone else mailbox. But by doing so, you don't interact directly with them and you're just fully responsible for your own state, how much money you have, how much money you sent. And then the envelope, the mail that's, you know, going to the mailbox, it's out of your hands.


So for you, your job is done. Then it's the job of the other actor to actually pick it up, you know, empty the mailbox and then to get it. So having that, you might manage to have like isolated states and that's how you achieve parallelism, but also privacy.


[Bobbin Threadbare] (48:22 - 49:00)
And it creates a lot of like cool things that are difficult to do in other contexts. And one example of this is like all these notes are fully programmable. Like every note has a script that, you know, can be executed that defines how this note can be consumed and all of that stuff.


And one of the things that you can emulate here is like recallable transactions. So like if you send something, like you create this note, but the other person does not consume this note in a given period of time, you can claim it back. So like if you screwed up an address, for example, like your funds may not be lost because if you send it to the wrong address, you know, the other person just, you can claim the note back and let's say four weeks time or whatever.


So like it allows you to do this kind of things that are difficult in a traditional blockchain, I would say.


[Gaylord Warner] (49:00 - 49:12)
You would have to programme it in the scripts that Bobbin's mentioned. But yeah, it's like emptying the mailbox, so to speak, because maybe the mailbox actually doesn't have a house. You just, you know, you messed up the address quite literally in that case.


[Anna Rose] (49:12 - 49:30)
I mean, it's also like the boomers among us. Actually, it's not even that. It's like, I'm sure the young do it too.


But like this fear of like, oh my god, I'm going to put this address in wrong. Checking, rechecking, double checking, be like, you know that once you send it, it's done.


[Gaylord Warner] (49:30 - 49:35)
You should still check, but if you mess up, you have a way to, you know, fix your mistake.


[Anna Rose] (49:35 - 50:36)
Cool. I mean, one of the big features of the Miden project has been its focus on privacy, even through sort of the privacy dark ages, like the period of 2022 to 2024, I'd say where a lot of projects that had initially been privacy orientated, got a little nervous, mostly because of the Tornado Cash and moved away from that. Miden was always very privacy focused throughout that time.


And there have been, I mean, you weren't alone. There were some other privacy projects that were released during that time, some that are coming up very soon. So things that come to mind would be like Aztec, always consistently focused on privacy.


And actually just recently, Penumbra, I mean, Penumbra came out, what is it a year or two ago, but just recently has actually wound down. I want to talk a little bit about the privacy question. Like first, like, have you found it challenging to stick to privacy?


And how are you thinking about privacy? Because there are these different flavours of it.


[Bobbin Threadbare] (50:37 - 51:26)
Yes, definitely. First of all, as I mentioned in the beginning, I absolutely believe that privacy is essential. We can't make, in my mind, blockchains work without privacy.


We're not going to get to the level of adoption that I think we all hope to get to if there is no privacy or if the privacy remains at the level where it is right now. And so this has been something that I personally have been trying to work on and solve ever since I got into blockchains. It's just like it took a detour into ZK to figure out how ZK works and teach myself ZK and all of that stuff to actually know how to address that.


One of the things I would say, though, is that we're trying to be somewhat more pragmatic about privacy. Like I'm OK with sacrificing some, you know, absolute privacy things in the short term if it leads to a better UX. So like one of the things I really don't want to do is like have a really cool privacy product if it means like people need to chew glass to use it.


[Anna Rose] (51:27 - 51:28)
OK, so ease of use. Yeah.


[Bobbin Threadbare] (51:28 - 52:12)
Yeah. Ease of use, in my mind, especially in the shorter term, like is more important than, you know, absolute privacy and giving people like, you know, ability to defend themselves against nation states or whatnot.


I think in the long term, this is absolutely important. But I do think that it shouldn't be a sacrifice for you to use... to be private. You shouldn't say, OK, I want to be private.


And, you know, I've used Tornado Cash. And at the time, the experience wasn't I mean, it was difficult and it was expensive. I mean, it was difficult and it was I paid like 30 dollars for a transaction that should have cost me, I don't know, less than, you know, a few cents, I think, at the time.


I don't remember the exact numbers, but I remember paying like a hundred times more than I should have paid. And like, OK, am I going to use it in daily life if I need to pay a hundred times more for a transaction?


[Gaylord Warner] (52:12 - 52:15)
The cost is part of the UX, actually. So it's quite important as well.


[Bobbin Threadbare] (52:15 - 54:06)
Yeah. And so one of the things that with Miden then is that on the one hand, as I also mentioned this in the beginning, where I think you should be incentivised to use privacy in the context of my design, like you can do things yourself, you can execute transactions yourself, you can store the state yourself. But then you can also do it on, you know, upload the state to the ledger and have the public state or encrypted state.


But in that case, it would be more expensive because you are asking some the network to store your state. And so the incentive here is like, OK, I can be public or I can be like encrypted on chain, but then I would need to pay extra for this. And so I think this is the right incentive design.


On the other hand, back to this pragmatic approach, I think one of the things that we're like, we're starting out as a centralised L2. And one of the reasons for this is, you know, what we want to do in the beginning is have this training wheels where I don't trust the proving system enough yet to say that everybody, you know, like, let's go and like open it up for everyone to use. So like my approach is to have this training wheels where we can double check the proofs for the first, you know, two years, maybe three years.


And then once we feel comfortable, maybe once we have two proving systems proving the same thing, we can say, OK, we're removing training wheels. So initially on Miden, you will be private against other users, but you would not be private against the operator.


So that's one of the distinctions.


And I think in the short term, that's an OK tradeoff to make because it, you know, prevents a catastrophic failure, for example. I think, you know, if there is a catastrophic failure, it will not be good for anybody in the space. So like and, you know, I would feel and sleep much better at night if I knew that probability of a soundness bug is nonexistent or at least negligible.


Another thing, by the way, to bring up, like I'm OK with delegated proving, like in a way where you delegate proving and give up privacy to some third party to generate proof. If you're in a like low power device and you can't generate a proof quickly enough, I would rather you, you know, give up privacy to some player and then wait 20 seconds for a proof to generate.


[Anna Rose] (54:06 - 54:18)
But aren't most of the private, like not Penumbra, but like Aztec, which is supposed to come out, you know, it's imminent sort of, is also like they do have a validator set and provers.


[Gaylord Warner] (54:18 - 55:36)
I think you have to when when you take, you know, UX into account for the just for performance reason, you kind of have. I know they're also looking into coSNARKs and stuff. But yeah, that's kind of a must delegating proving when you want to have, you know, acceptable performance, at least, you know, now in 2025.


But actually, going back to what you were saying about the prover and the soundness bug possibility, the way I like to think about it is like in these big factories where you have workers, you always have, I think it's mandatory by the law, you have this big red button that in case someone gets, you know, a hand stuck in a machine, you can stop it so that nobody gets hurt. So the way I'm seeing that is very similar here, where in case there is a bug, we have a way to stop things, whereas when you're not, when you're going fully decentralised, it's a bit harder to do. But it doesn't mean, you know, we will get there.


And also one way we want to get there, we were actually discussing that recently with Bobbin, I found it very interesting, is this idea of having multi-prover redundancy, kind of the same way Ethereum has several clients. Actually, Justin, I think, mentioned that they have five because if there's a bug in one or even two, then you can switch to another client. So here is going to be the same with the proving system.


So if you have like, you know, Plonky3, but you also have Ligero or even Ligerito, and there is a bug in Ligerito because the research paper maybe was poorly written. And then you can go back to Plonky3.


[Anna Rose] (55:36 - 55:39)
It's a little dig at Guillermo right there, but it's fine.


[Gaylord Warner] (55:39 - 56:03)
Okay. I was originally thinking of saying the opposite. I just switched when I saw your proud face.


But you see what I'm getting with that? It's like, basically the idea is to mitigate risk, really. And that's, again, that's something for the whole industry.


It's not only for Miden. So, yeah, I really like this idea of having a multi-prover. And that's, I think at this stage, maybe we'll feel good enough to remove the, you know, big red emergency button.


And that's our approach.


[Anna Rose] (56:03 - 56:26)
What is the centralised part in that case? So it sounds like there will be various provers. Like, just comparing to other systems that have deployed, like, how did they do it decentralised?


And how are you doing it centralised exactly? Is there a validator set? Is there no validator set?


Is there a single proving entity? Like, I'm just kind of curious where that centralisation actually happens.


[Bobbin Threadbare] (56:27 - 56:32)
So initially there will be a single Miden node, which, you know, will post data to Ethereum.


[Anna Rose] (56:32 - 56:33)
Is that like the sequencer?


[Bobbin Threadbare] (56:33 - 56:44)
It will be.


Well, so in our case, sequencing and proving are basically intertwined. It's, you basically generate a proof, like, almost at the same time. I mean, there's slight delay, but almost at the same time as you have a block.


[Anna Rose] (56:44 - 56:45)
Okay.


[Bobbin Threadbare] (56:45 - 57:18)
So there is not a big difference between them. So the idea is that this centralised node collects transactions from people and builds blocks and then proves those blocks. And then this proves goal to Ethereum.


But in this initial, like, training wheels period, this will be the only sequencer or the only node, and it will be the only one generating proofs and posting them to Ethereum as well. And so, you know, you kind of have protection against this node because there is a proving system. But at the same time, if there is a bug in the proving system, you know, and the node behaves honestly, so we behave honestly, then there is no issue.


[Anna Rose] (57:18 - 57:28)
And that's different from some of the other systems where they launched with a full validator set and sort of handing off that power to a number of different node operators.


[Bobbin Threadbare] (57:28 - 58:28)
And to be perfectly honest, I would say another reason is that it's easier to build this centralised approach than to try to build a whole decentralised right from the start. Like, we'll go to mainnet, we'll operate in this mode, and then it will take the next two or three years to build a truly decentralised system that has multiple validators and operators. And like, we have all kinds of cool ideas that we just don't have the time to implement.


Otherwise, it would take us another year or two to deploy the network. And so, yeah, in the short term, because we can be an L2, we can get this security from Ethereum, you know, assuming the proving system is sound and we are honest. So it's kind of like one of two assumptions.


We can also bring in other things into this mix as well. And then the other thing that to be clear is that, like, when the users execute and generate their proofs locally, they will do this still. There is local proving and client-side proving, but they will also send us the data that will allow us to verify that the proof is correct by initially re-executing the same programme.


So again, that's why I'm saying there is no privacy against the operator, but there is privacy against other people.


[Anna Rose] (58:29 - 58:38)
I see. So you would see, like, as an operator, you will see at this first stage, like you'll see actually transactions and amounts and everything.


[Bobbin Threadbare] (58:38 - 58:38)
Exactly.


[Anna Rose] (58:38 - 58:41)
Because it's the thing that you're doing a proof on is actually being sent to you.


[Gaylord Warner] (58:41 - 58:45)
I mean, that's typically what you call this Web2 style privacy.


[Anna Rose] (58:45 - 58:45)
Yeah.


[Bobbin Threadbare] (58:46 - 58:49)
When you're not private against your bank, but you're private against all other people who use the same bank.


[Anna Rose] (58:50 - 58:56)
Which is pretty useful. I mean, I think a lot of us still use centralised exchanges as our privacy node.


[Gaylord Warner] (58:56 - 58:58)
99% of the world works like that. Yes.


[Bobbin Threadbare] (58:58 - 59:12)
But again, so I think in the short term, this makes a lot of sense. I mean, it's drastically better than what we have right now with fully transparent chains.


It's not the ideal that we want to get, but I also think it's okay if it takes a few years to get to the ideal.


[Gaylord Warner] (59:13 - 59:28)
Yeah, it's software development. That's how you do it. You iterate and you add the features depending on what people want.


You add them progressively. So that's again, kind of, I think you used the word pragmatic before. So that's in the same vein.


That's a pragmatic approach to software development, I suppose.


[Anna Rose] (59:28 - 1:00:08)
What are some of the other challenges though that you see working with privacy? Like even once you become more of a decentralised private system, do you still see like nuanced privacy or are you aiming for full? And this is where I'm kind of trying to dig in here because really a lot of different privacy projects have taken different approaches.


We get to learn from some of them, but some of them it's like maybe they were too early. Maybe they didn't focus enough on business. Maybe they were wrong place, right.


You know, like there's all these circumstances that sort of like lead to certain outcomes, but we do now have some examples of launched privacy projects. And yeah, I'm wondering what other takeaways you've gathered from them.


[Bobbin Threadbare] (1:00:09 - 1:00:26)
I think the ideal state of the world in my mind, and I don't, to preface this, I don't know how to get there yet, but I'm hoping to figure it out, is that where you have full privacy, but at the same time you have like this threat resistance or hack resistance where you can't have North Koreans laundering money through the system and things like that.


[Anna Rose] (1:00:26 - 1:00:28)
Or like people printing unlimited money because of a bug.


[Bobbin Threadbare] (1:00:29 - 1:00:50)
Yeah. I'm not sure. So the second part hopefully we can solve with like multi-provers and like things like that and like formal verifications and other tools.


The first one is where how do you give real privacy or near absolute privacy to people at the same time adhere to some compliance rules and make sure people don't like do bad things? I think that's a very tricky question.


[Anna Rose] (1:00:51 - 1:00:51)
It's so tricky.


[Bobbin Threadbare] (1:00:52 - 1:01:30)
But I do hope that there is, there are ways to achieve like maybe not all of it, but most of it in some ways where there are some in-protocol mechanisms that allow you to say, OK, if I'm, this is not going to work in practise, but like let's say if I'm transferring ten thousand dollars, like it should be absolutely private. If I'm transferring twenty million dollars to a billion dollars, maybe there should be some other things involved where, you know, it's not as straightforward or maybe there are some mechanisms that prevent people from like, you know, abusing the system, so to say. And again, I don't have a solution right now, but I also hope to take this next, you know, two or three years to see maybe there is research enough that can help us in this direction.


But, you know, that is, in my mind, uncharted territory in some ways.


[Gaylord Warner] (1:01:30 - 1:02:27)
I mean, that's why you want a solution that's kind of adjustable depending on the users. First, you have also individuals and institutions.


It's quite different targets. They don't have the same needs. Maybe institutions, they are less, you know, they don't mind so much about the government surveillance, but they have other compliance needs.


So when you have like adjustable privacy, you can actually adjust it depending on whether it's an individual user or maybe an institution. So, I mean, to be fair, right now we are talking also to institutions and this is a bit more of our focus, like private banking. This is also what, you know, when we onboard builders, we usually work on OTC trading, maybe payroll automation, lending, staking for treasury.


So a bit more institution focus in a way. And yeah, hopefully with the solution being more mature, it opens to a larger audience with maybe, you know, also like nation state surveillance resistance or stuff like that. But actually, I mean, at this standpoint with the current state of the product, institutions are actually a more logical focus for us.


[Guillermo Angeris] (1:02:28 - 1:03:00)
So one of the things that is kind of interesting, you mentioned early on in the episode, and I assume this is actually quite tightly coupled with the privacy aspect, is this fact that, you know, you said what's interesting also about Miden is that people are incentivised to kind of maintain state outside of the chain. Yeah, what's cool about like succinct proofs and all this stuff is that, you know, you can kind of hide the inputs either for efficiency's sake or for privacy's sake, or in this case, both, I assume. And so I assume this is all somewhat related to, but can you talk a little bit more about like what you meant when you said like, oh, we incentivise people to keep state off-chain?


[Bobbin Threadbare] (1:03:01 - 1:04:57)
I think basically on Miden, you have this accounts and notes, as I mentioned, and they can be both either on-chain or off-chain. And so you have this kind of like two-by-two matrix. You can think about, okay, this is an account can be off-chain or on-chain and a note can be off-chain or on-chain.


And whenever you create a transaction, you would know, okay, this transaction is interacting with an account that is on-chain or off-chain or like using notes that are on-chain or off-chain. And then based on that, you would have to pay a fee to the network, right? So the fee computation mechanism depends on, okay, if I'm putting like a bunch of data on-chain, my fee would be higher.


If I am consuming or producing notes that will live on-chain, the public notes, we call them, my fee would be higher because the network needs to store more data. They need to consume more resources. And so it will kind of happen naturally through the fee system, or at least that's our expectation.


I mean, to be honest, like this is not like running in production right now, but our expectation is that if we build the fee system properly, then, you know, if I store my own state, it's like, okay, my account can be a few kilobytes or maybe even like a large account could be megabytes of data if I own a lot of tokens and like have a lot of complicated logic in my account. So it could be like, let's say a megabyte of data, which I don't need to put on-chain if I keep it privately. I don't need to pay for this extra megabyte to go on-chain.


I only put a 32-byte commitment to the account on-chain. I mean, it's a bit more complicated than that, but roughly. And so I don't need to pay the fee for this megabyte.


And the same thing if I like run a complicated transaction. And in this case, like I do think transactions are, you know, even simple payment transactions would be, you know, you want to make sure you have like some check against rate-limits and things like that. You have sophisticated wallets that prevent hacking and all that stuff.


So they all will be relatively complicated. And so I prove this transaction myself. I don't have the network proving that.


And so the network, I don't need to pay a fee for proof generation, so to say. And so, you know, I don't know what the delta will be. Again, it's not running in production yet, but the expectation is that there is going to be some delta and it will be a meaningful delta because I can do all of these things myself and the network doesn't need to do them.


[Anna Rose] (1:04:57 - 1:05:01)
But this first centralised launch won't have this built, right?


[Bobbin Threadbare] (1:05:01 - 1:05:03)
There will be a fee in there as well. Yes.


[Anna Rose] (1:05:04 - 1:05:10)
Oh, but would you have the incentive to actually do it? I thought you were still sending all the data to a centralised node.


[Bobbin Threadbare] (1:05:10 - 1:05:54)
You do, but like the centralised operator doesn't. I mean, we may decide to keep it, but it doesn't need to keep the data. Once it's verified that the proof checks out, it can discard the data.


I mean, there could be good reasons to keep it for other purposes, which we can get into. But in theory, like you don't like the blockchain itself doesn't need to have the data and the centralised operator, once it's verified the transaction was submitted correctly, can just discard this data and never even store it. So I do think the incentive will be there.


What I cannot say is like, you know, is it going to turn out to be a big incentive or a smaller incentive? That's difficult to predict. But that's also part of like, I mean, we're going to have a multidimensional fee model where like different resources, you know, we have a verification cost resource.


You have like how much data you put on chain resource. You have a couple of other things that play into that. And so this fee model, you know, if designed correctly should incentivise this usage.


[Guillermo Angeris] (1:05:55 - 1:05:58)
Yeah, we don't have thoughts about multidimensional fees. That's crazy.


[Bobbin Threadbare] (1:05:58 - 1:05:59)
That could be another episode.


[Guillermo Angeris] (1:06:00 - 1:06:03)
That is, maybe it's like an episode, you know, for a different time.


[Gaylord Warner] (1:06:03 - 1:06:05)
I mean, usually cheaper is better for the users.


[Bobbin Threadbare] (1:06:06 - 1:07:45)
I think one thing is important to say, because this model is not without its trade-offs, right? Because if I keep the data locally, I am in charge of the data.


If I lose it, I'm locked out of my account. So like, it's like a different model. Like right now in the blockchain, I can always like, if I have my seed phrase, I can always go and download my information.


It may take me some time to parse through the blockchain or somebody may help me, but I can always get the data. With this model, like if the data is local and if you lose the data, then it's kind of like, yeah, it's lost. You've locked yourself out of your account.


And so the solution there is like, and same goes with notes, for example, we have the mechanism for distribute notes through the blockchain, but also like the private notes, you have to have a side channel with another person to send them the private note so that they have it. Otherwise, they only see the commitment to the note. They don't know how to consume it.


And so you need to build like auxiliary kind of services, so to say, that allow you to store the private data, like distribute notes privately, not using the blockchain. And, you know, there could be multiple solutions there. For example, like if I have $100 in my account, maybe it's fine if it sits on my phone.


Like if I lose my phone, I've lost more than $100 anyway. So if I have like a few thousand dollars, it's fine if I back it up to Google Cloud, it's secure enough. If I have millions or billions, I probably want to have some kind of decentralised solution itself that keeps the state.


Like, and so we've actually partnered with a number of like players in the space to help us build those things. So like private state management would be built by OpenZeppelin. Private note distribution is going to be working by NetherMind.


And so like they're kind of like these auxiliary services that will come together to say, OK, you use the blockchain, but you also need these things for private state management if you care about that. You can also build it yourself, but here is a solution that allows you to maintain the state privately.


[Anna Rose] (1:07:46 - 1:08:13)
Just going back to sort of the origin story of Miden as a project and spinning out of Polygon. I mean, you mentioned that you're working with a Polygon 3 stack, but are there other connections to the Polygon team still or the Polygon products or the other Polygon spinouts? I'm just kind of curious if it's really like offshoots doing their own thing or if you are going to like lock into the Agglayer.


I don't know if they're still working on that, but like the initiatives that had been happening over there.


[Bobbin Threadbare] (1:08:13 - 1:08:54)
Yeah, I think, I mean, first of all, Polygon has been working on a number of very cool things like throughout my time there and even, you know, still right now is working on a lot of cool things as well. I think like in relation to Miden, we are kind of separate, but we are like you brought up Agglayer. We will try to integrate with the Agglayer.


So like we actually have a design of how Miden will plug into Agglayer. Like for this to happen, Agglayer needs to support non-EVM chains, which according to roadmap is going to happen hopefully in Q4 this year. So maybe a bit, you know, plus minus some buffer.


But yeah, our intention is to integrate with the Agglayer and kind of like this is how we can, you know, post things to Ethereum and will simplify quite a few things for us if we can do that.


[Anna Rose] (1:08:54 - 1:08:57)
Will you also be an L2 on Ethereum or like an L2 on Polygon?


[Bobbin Threadbare] (1:08:58 - 1:09:20)
No, that's L2 on Ethereum. So like Agglayer settles to Ethereum. I mean, there is other things happening in there to allow like fast interop between different chains, but in the end it all goes to Ethereum.


And I think Plonky3, we collaborate on like I've had some calls already and we're going to have more calls next week about like, you know, what do we need in Plonky3, for example, that is not there yet. And, you know, things like that.


[Anna Rose] (1:09:20 - 1:09:22)
Do you build it or do they build it?


[Bobbin Threadbare] (1:09:22 - 1:10:24)
I mean, we could build it or they also have their own plans to what they want to do with Plonky3. So on this technical levels, we work very closely. I would say also non-technical ones.


I mean, we still have very good relationship with Polygon. And so like if there are some things even on the business side we can tackle together, doing it with Polygon makes a lot of sense. So I think we have very good relationship, like I mean, with Polygon folks, both on technical and non-technical fronts.


And I think even with other projects that kind of spun out of Polygon, there is the Billions Network, there is ZisK and maybe I may be missing one other one. But yeah, so like, I mean, even though we're not talking maybe like immediately together, but like we all keep in touch and we know what everybody is working on. And so like if there is an opportunity to work on something together, that's always like, you know, yeah.


I've been part of several mafias of like, there is a Polygon mafia, there is also a Facebook mafia, there is like these different mafias running around and you're plugged into them and it helps.


[Gaylord Warner] (1:10:27 - 1:10:53)
Yeah, I guess there is. That's why I'm here, I guess. Maybe one of the things on the Polygon side, actually, and helping you maybe with the transition is like Polygon was very heavy on ZK education, you know, a few years back.


And I feel like also we have maybe to, you know, pass the torch on maybe all of these projects. I know Avail that you didn't mention, but they're also doing a lot on the ZK education front. So, you know, there is also this part that I feel like the Polygon alumni maybe are taking over.


[Anna Rose] (1:10:54 - 1:11:41)
For sure. And what I was going to mention, Polygon was actually the funder and supporter of the first whiteboard session. And I wanted to wrap this episode on the whiteboard sessions because all four of us have worked on the ZK Whiteboard sessions at some point or another.


ZK Whiteboard sessions, for anyone who doesn't know, I think I will probably have mentioned it at the very start of this episode. It's an educational series, video series. It airs on the Zero Knowledge Podcast YouTube channel and it's produced by ZK Hack.


So all the pieces. Bobbin, you were the host, along with Brendan, of season one and part of the development team. Polygon was so awesome, like funding that because I don't know if it would have happened without Polygon support back then.


And that really launched the series.


[Bobbin Threadbare] (1:11:41 - 1:11:55)
I would say that was like an awesome experience. And I think this is how I get recognised the most at different conferences. People come up to me and say, oh, I know you from the whiteboard series.


Like they don't know me from my talks or other things, but like they know me from the whiteboard series.


[Anna Rose] (1:11:55 - 1:12:33)
Those videos have had a lot of views. The season one, I mean, the first one is with Dan Boneh. It's 32,000 views at this point.


So, you know, that's pretty substantial for hardcore ZK content. Yeah, this is not easy for people. And then I think the videos you mean we did for that season, if I remember correctly, we did 16 modules.


We did tonnes of videos and you were the host for half of them. I think you were the guest on one of them, along with Brendan. I want to throw to Gaylord, because Gaylord, you worked on season two as a producer with me.


[Gaylord Warner] (1:12:33 - 1:12:37)
Season two. Yeah, I recorded one in New York, the infamous one I had to postpone.


[Anna Rose] (1:12:37 - 1:12:49)
Oh yes, you also had to do like a very intense colour correction animation to fix the Justin Thaler video because there had been this big like white splotch right in the middle of the whiteboard.


[Gaylord Warner] (1:12:50 - 1:13:11)
But in the production, there is also, you know, the communications here. There's actually a lot of work people maybe don't realise, but there's a lot of work behind the scenes. I mean, Anna, you're also doing quite a bit of it.


So yes, not only in the production, but even in the communication, the distribution, and also with the study groups that we are running on ZK Hack. Maybe I will do some for season three. I don't know.


[Anna Rose] (1:13:12 - 1:13:38)
Yeah, well, this is the funny thing too. Yeah, we kind of have done like a continuation of like revisiting those early whiteboard sessions. Season one, we did a study group last year, going back to season one in prep for season two.


Season two was funded by the Ethereum Foundation. They had a ZK Grants programme, also awesome. And all these great teams like Aztec, Polygon, all these people.


And I'm missing some here.


[Gaylord Warner] (1:13:38 - 1:13:39)
Yeah, Tyco, ZKSync, so many...


[Anna Rose] (1:13:40 - 1:14:01)
You know it. Had funded the ZK Grants that then funded the whiteboard session season two. And now season three comes along and Guillermo, you're going to be one of the co-hosts along with Nico this time around.


And it's supported by Bain Capital Crypto. I feel like just having all of you on for this episode is so funny.


[Guillermo Angeris] (1:14:01 - 1:14:04)
It is funny too.


Yeah, it's season one and then two.


[Anna Rose] (1:14:03 - 1:14:04)
Full circle.


[Gaylord Warner] (1:14:04 - 1:14:05)
Guillermo is the rookie, but...


[Guillermo Angeris] (1:14:05 - 1:14:11)
I am, I am. I'm surrounded by veterans here. I'm the like young guy, you know, trying to make his way into the world.


[Gaylord Warner] (1:14:11 - 1:14:13)
We believe in you. Lot of potential.


[Anna Rose] (1:14:13 - 1:14:47)
Well, by the time this airs, we should have, I mean, we have at least one module out the door, possibly two or like the second on the way. We're planning eight. So season one was 16.


Season two was six. Plus the bonuses that Dan Boneh did. And season three will be eight.


Plus possibly some bonuses, but we don't know yet. Very cool. Yeah.


It's so nice to have all of you here to just kind of reminisce for a second on that too. It's been a longstanding series.


[Guillermo Angeris] (1:14:47 - 1:14:51)
Anna, you're just building institutions. Is the point. You know, these are like, like, I have bad news.


[Gaylord Warner] (1:14:52 - 1:14:55)
There's still a bit of work for 300 ZK Whiteboard sessions.


[Anna Rose] (1:14:56 - 1:15:25)
Those are tricky. One of the big challenges with the Whiteboard sessions, maybe just to wrap up, like the way that they work is we spend time brainstorming, like what are those fundamentals that maybe have emerged recently? What can we cover?


We then seek out the guests. We find the hosts. We find the locations.


We do the recordings. We have identified every way possible to wreck a Whiteboard session recording by accidentally doing it. Audio failure, glare.


[Gaylord Warner] (1:15:25 - 1:15:26)
The glare is the worst.


[Anna Rose] (1:15:26 - 1:15:48)
Glare is really the big one. But we have also, I think, found a really nice model. I know a lot of people have actually used this to onboard themselves into important concepts.


And I have heard through the grapevine, although I need to find the source here, that it has been used with university, like as an addendum to university courses, like not the main, but like an extra.


[Guillermo Angeris] (1:15:49 - 1:16:01)
So like supplementary. Yeah, actually, I think in the ZK MOOC, one of these things that happened like last year or something, I think the season one was referenced, if I recall correctly. I remember seeing the links.


[Anna Rose] (1:16:01 - 1:16:26)
Nice. Maybe that's where I got it from. But yeah, thanks, folks, for coming on the show and sharing with us the story of Miden.


Thank you, obviously, to all of you for working on some capacity on the Whiteboard sessions. I think everyone's really happy about that. But I know that we're here for Miden.


Thank you so much for sharing with us what you're working on. Yeah, going into the details, sharing this update, getting us a little up to speed on what you're thinking about and where you're at.


[Gaylord Warner] (1:16:27 - 1:17:15)
May I say one thing I want to add before we wrap up is we mentioned a lot of, you know, competitors. I mean, not even competitors, but actors of the ZK industry.


And I really want to make it clear that, I mean, we're really all fighting the same fight. You know, maybe, of course, our approach differs. You know, I don't know, private share state here or maybe some levels of privacy, provable compliance, gradual decentralisation or whatnot.


But, you know, at the end of the day, I mean, they are just implementation details. So, you know, it's I mean, especially for me, who knew all these people, we've been working together for the past two years with you, Anna. So, I mean, the point is not really to be competitors, actually.


I guess I misspoke. It's more like to build, you know, this world where actually we don't have a dystopia, as Bobbin started with, but we have blockchain that can be used by, you know, billions of people since it's been the target from the beginning.


[Anna Rose] (1:17:16 - 1:17:23)
And has these qualities that we really want to see out in the world. Cool. Thanks, Gaylord.


All right. Thanks, folks.


[Bobbin Threadbare] (1:17:23 - 1:17:25)
Thank you for having us. Thanks, Anna.


[Guillermo Angeris] (1:17:25 - 1:17:26)
Thank you, guys.


[Anna Rose] (1:17:26 - 1:17:34)
So, I want to say thank you to the podcast team, Rachel, Henrik, Tanya, and Hector, who just recently joined, and to our listeners. Thanks for listening.