Anna Rose [00:05] Welcome to Zero Knowledge. I'm your host, Anna Rose. In this podcast, we will be exploring the latest in zero-knowledge research and the decentralized web, as well as new paradigms that promise to change the way we interact and transact online.


This week, Nico and I chat with Goblin Oats from Tonk, and grjte from Bain Capital Crypto. Together they introduce us to the concepts of local first and cloud-optional architecture.


We learn about the goals of local first, why each of them independently became interested in it, and what it offers the end user. Local first brings the locus of control closer to the end user by providing new frameworks for conflict resolution and data integrity in more decentralized peer-to-peer setups.


With these setups, users can own their data, can work on it offline without relying on a connection to a cloud provider, and control when and how their data is being shared.


Goblin Oats shares the evolution of the Tonk project from an experimental lab to a product in the local first ecosystem. grjte shares her explorations into local first as well with her Groundmist project and where she sees the space evolving.


Both identified some of the parallels with the blockchain space and how advanced cryptography like ZKPs can help bring even more richness to this ecosystem. This is the first time we dive into the topic on the show, and it was really fun to explore.


Let me know if you like it. I'm thinking of doing more episodes in this direction.


Now before we kick off, I just want to point you towards the ZK Jobs Board. There you can find job postings from top teams working in ZK. And if you're a team looking to hire, you can also post your job there today. We've heard great things from teams who found their perfect hire through this platform, and we hope it can help you as well. Find out more over at jobsboard.zeroknowledge.fm. You can find this on our website, and I've added it to the show notes.


Now here's our introduction to local first with Goblin Oats and grjte.


Today, Nico and I are here with Goblin Oats from Tonk, and Bain Capital crypto researcher and ZK Hack alumni grjte.


Hey, all. Welcome to the show.


Goblin Oats [02:20] Hey.


grjte [02:20] Hi.


Anna Rose [02:21] Hey, Nico.


Nicolas Mohnblatt [02:21] Hey. Super happy to be here, especially with these guests who I've known for a long time, worked with for a while. So really happy to have everyone on the show for once.


Anna Rose [02:30] Cool. So today's episode, I think what we're going to be talking a lot about is this concept of local first. But just a little history on sort of how this episode came together. Originally, it was out of a curiosity for this project called Tonk.


So I want to sort of start there. Goblin Oats, this is your project. Can you tell us a little bit about what Tonk is? What it was? I feel like when we started working on putting this episode together a few months ago, since then it's -- I think Tonk has potentially changed. So tell us a little bit about what this is.


Goblin Oats [03:05] Yeah. Sure. Happy to get into the details. And by the way, super excited to be on the podcast. ZK Podcast, I think, has just accelerated the space so much, and was really impactful on my journey.


So with Tonk, I actually met my co-founder, who's Harry, at an incubator called Entrepreneur First.


Anna Rose [03:26] Yeah.


Goblin Oats [03:26] And he told me about ZK. He was like, you got to check out this thing. It's ZK. And I was like, whoa. I read -- I think I tried to read the Plonk paper immediately without knowing anything about cryptography. And I was like, this is amazing. And the ZK Podcast was one of the first things that I jumped into.


So, yeah, I suppose I'll start -- I'll go in chronological order, and just kind of say that when we first started, we were really operating more like a labs.


So the big mission of Tonk is we believe a lot in data sovereignty. We want to see a certain agency on the Internet. In the same way that I don't live my entire life in a mall, I don't also want to live my digital life in Google servers.


And I think also we see commercial friction there. So Harry, previously, when he was at Epic Games, was working on this parent list, like a master parent list, which is very bizarre, like surveillance capitalism coded. But is a kind of necessary thing for child safety when you need to get an actual parent’s permission.


Nicolas Mohnblatt [04:31] So this is a list of actual parents?


Anna Rose [04:33] Parents.


Goblin Oats [04:33] All parents. Yeah.


Anna Rose [04:34] Not like -- okay.


Goblin Oats [04:35] They are -- and it's --


Nicolas Mohnblatt [04:36] Like human beings, not just the parents' relationship in a graph or something. Yeah.


Goblin Oats [04:41] It's like if you're a child, you need to know who that child's parent is. And you need to be able to send an email to the parent and say, hey, is it okay if your child does this thing, or is like using a credit card? And that makes sense. You want supervision. You want parents to be able to have a say in what's happening online with their children.


But the only mechanism that exists to enforce this is that companies like Epic Games and other large platforms essentially crawl the entire social graph of the world and filter it into a massive database of all parents.


Anna Rose [05:17] Creepy.


Goblin Oats [05:18] So it's weird. And I think Harry was -- he was working on this and he was thinking, there has to be a better way. There just has to be a better way to do this. And that's really, where -- that's how Tonk started.


Anna Rose [05:30] Okay.


Goblin Oats [05:31] Essentially. So I think it's like me getting nerd sniped on ZK. But, I mean, I do have a background with doing funny things. In the Bay Area, I was working on this art collective thing, which was very sort of open and free, and people would come and do tools. And I like that idea of autonomy and agency. So that's kind of the mission and where we're coming from with Tonk.


But how we operated up to this point, I would say, maybe a year ago, was really as a labs. So we were thinking, how do we even begin to tackle this problem?


The idea was, oh, well, there's this really cool thing called blockchain games. And blockchain games need hidden information. And hidden information requires all of this novel cryptography on the blockchain. And that's the perfect place to incubate. We'll generate a ton of really good ideas. We'll generate tooling.


So we worked on stuff. We worked on a ZKVM for Nintendo called Dappicom. We had this ZK state channel that we did as a ETHGlobal hackathon, one of the first ZK state channels. I didn't even know what a ZK state channel was, but we made it.


Anna Rose [06:46] What year is this?


Goblin Oats [06:48] 2023. I think I didn't know what was going on, but maybe a couple months ago, or after we had made the thing, I read about this thing called ZK state channels, and I was like, there it is. That's what that thing is, that we made.


And it was just like you would battle back and forth with a server like a Pokemon match, and then it would settle onto the chain. But everything was enforced using ZK and shared randomness.


And then I got interested in this problem of interoperability and making a general dev framework for hidden information. That was something called Gribi. And then about that time, I think, is when we started to think, okay, the blockchain games thing is mostly useful for gambling. And we kind of want to go in more in a product direction.


So no shade to people who are building blockchain games. There's a long arc, I would say, like a really cool vision for fully onchain games, creating almost like a metaverse concept. There's people working on this. It's really, really cool. 


But sort of the product traction today is pseudo gambling. So you're putting tokens in, and then you're getting tokens out, but with just extra steps. So it has this slot machine characteristic to it. You don't need hidden information for that. So it wasn't really a good place for us to actually incubate the technology.


So we elevated to the social layer. And we thought that, oh, okay, well, people are kind of doing these interesting games in blockchains. Maybe they want to share asymmetric information. And that was how this project called Speakeasy was born.


So Speakeasy we worked on for maybe 4 to 6 months in a pretty tight internal prototyping labs like iteration. The way to think about Speakeasy at the end of the day is it's like an infinite canvas whiteboard where you can drop text and images and information that might be kind of sensitive. And the only people who can see it are people who are bounded by verifiable behavior online, kind of like digital identity.


Nicolas Mohnblatt [08:50] So it's sort of gated by some kind of ZKP of some form of identity, or some form of reputation. Right?


Goblin Oats [08:56] So you were telling me, Nico, about zk-creds, and zk-creds definitely was always in my mind while I was thinking about this. Also, I think semaphore trust infrastructure was a part of that.


So I don't know if you want --  that was an era where a lot of the folks in trust infrastructure and that whole meme were really thinking about how do you trust people online?


And the idea is, well, I may want to have a really tight inner circle of people who I know are cool. Think about AI researchers able to talk about AI research without being bombarded by PR people and hype people, just having a space where the only way to get into that space is by being verifiably an AI researcher.


This kind of happens, but it's enforced by gatekeepers. So that was the big Speakeasy product, which then kind of takes us into where we are today.


So when we were building Speakeasy, we actually used a local first architecture to build that product. And as we were building it, I started to realize that a lot of the primitives that are used in local first actually ergonomically are quite well suited to verifiable data objects, and there's all of this opportunity for programmable cryptography.


And I thought, wow, this is getting where we want to go, where we want to play with social information online. I want to do things with my family, I want to have that kind of liberated feel online where I have full agency and autonomy over my data. Any kind of data, not just financial data, which is mostly where the blockchain kind of drops off. 


Yeah. And we have a product that you can use today. We're building very openly in the public.


Anna Rose [10:43] Very cool.


grjte, I want to say hi to you and welcome you back to the show. You have been on long, long ago in the first ZK Hack online event. You were one of the winners of the write-ups. And I remember your story was so cool because it was from zero to one in a way through ZK Hack and doing these puzzles, and then all the way to getting a job in ZK, and then being a top researcher in ZK.


So, yeah. Welcome back. How are you?


grjte [11:15] Thank you. Good, Great. Yeah. It's great to be back. From my time then, I went to work at Miden when it was Polygon Miden before it spun out. So I was the engineering lead there. I did a lot of work on building a VM with Bobbin, and then just sort of towards the beginning of the rollup starting to happen.


And then I transitioned from there to Geometry Research which then joined Bain Capital Crypto. So now I'm working as a researcher following sort of a different thread than working on a product.


But my latest exploration was a project around local first called Groundmist. And it actually didn't have any cryptography in it at all. But the through line I think between these has been really a focus on personal agency and control over data.


Anna Rose [12:03] Yeah.


grjte [12:03] And that was very true looking at building a zkVM to do client-side proving and all the privacy aspects of that now through to the way that I was thinking about things in this project, Groundmist. And now, wanting to come to a place where they start to come together, these new patterns that are more -- provide more sovereignty for data with the local first patterns, and then cryptography which has all of these schemes and protocols built in for the same purpose, and seeing them come together.


Anna Rose [12:31] Amazing.


grjte [12:31] That's where I am now.


Anna Rose [12:33] What's the connection between Tonk and your work? Do you end up collaborating?


grjte [12:36] I think the biggest connection is that Goblin and I keep going in circles kind of around each other. We won't talk for a little while, and then we'll suddenly realize we've just done the same thing during the time when we weren't talking.


Anna Rose [12:50] Whoa.


grjte [12:51] So the most recent realization of this, I think, was sometime in February or March, where it turned out that we had both built a personal sync server for Automerge for different reasons. Mine was as part of this Groundmist project. Theirs was as the beginnings of the new Tonk product.


And after chatting about it, we were sort of like, should we maybe sync up a little bit more often? Because it's actually been a few years that we've been thinking about very similar things and sort of coming in and out of conversations around it.


And I think we both seem to be very drawn to both the programmable cryptography and the local first stuff because of this idea of agency and control over your own data, and being able to have sovereignty and privacy.


Nicolas Mohnblatt [13:38] I feel like we've said local first many times, but we haven't yet explained really what it is. But before we get there, I just wanted to mention one quick anecdote, because, grjte, we did say that you're a ZK Hack alumni, but actually, so are Tonk.


Goblin Oats [13:50] Ah, yeah.


Anna Rose [13:51] Really?


Nicolas Mohnblatt [13:51] You guys participated in the first IRL ZK Hack, and I think actually the "Chewing Glass" prize sort of came from trying to compare the project they were doing to other projects. And like well, it's hard what they did. They really were chewing glass, and it's hard to compare this to full applications. And so, that's where the category comes from.


Anna Rose [14:09] You prompted the "Chewing Glass" category creation. It's amazing.


grjte [14:14] Actually, Tonk hacked on Miden at that ZK Hack and that's what --


Goblin Oats [14:17] I know. I didn't even realize that.


Anna Rose [14:21] So cool. Was that the Lisbon one?


Nicolas Mohnblatt [14:22] That was Lisbon. Yeah. Absolutely.


grjte [14:23] Yeah. 


Goblin Oats [14:23] Yeah. Yeah.


Anna Rose [14:24] Wow. All the way back. Very nice.


Nicolas Mohnblatt [14:27] So just a fun little anecdote tying everything together.


Anna Rose [14:30] Yeah. Just going back to what you were saying about the autonomy agency. It's interesting because I feel like through programmable cryptography, ZK, we ended up talking a lot about privacy, but privacy obviously has -- it means different things to different people.


I feel like the definition that you're describing, or the thing that attracted you, I feel that it feels more alive, it feels more empowered. It feels less about hiding. It has something -- there's something more positive in a way. I just like -- it feels like it expands a little bit the goal of what a lot of this stuff is for in a way that I like. So, yeah. I just wanted to highlight that.


grjte [15:09] I used to think that it was privacy that I really cared about. And then, the more I thought about it, the more I realized that it's being able to have selective control over which parts of my data I use when. And that's something that's bigger than just privacy.


And it's something that can happen, that can be related to data that's shared with other people, or data that's fully public, or data that's fully private and mine. I maybe want to combine private data that comes from different places in a way that's easy.


And that control can be restricted too, even while having privacy. So I do think that it's bigger than just privacy.


Anna Rose [15:44] Cool.


Nicolas Mohnblatt [15:45] I mean, even having access to the data in the first place is something that we don't always see in the current -- the way the web is --


Anna Rose [15:51] True. And we don't own it.


Nicolas Mohnblatt [15:53] Yeah. So I guess it's time now to define local first and sort of explain what it is and why, does it tie in with these sovereignty ideas, right?


Anna Rose [16:01] Is it a movement? Is it like a team conference? What is it?


grjte [16:06] It's sort of a movement. It's like an architectural pattern, is the way that I think about it. It comes originally from this essay that was put out by people at Ink & Switch, including Martin Kleppmann and Peter van Hardenberg, about building local first software.


And they had actually a set of seven principles that they laid out, one of which is, your data should just always be at your fingertips, so you basically have zero latency. Your data lives on your device. You don't have to wait to sync to the cloud. That also means that you can do things offline.


So it solves the airplane problem or the train problem, if you live near London and are always going on the Tube and everything cuts out. You can always do what you want.


Anna Rose [16:47] And Google Docs doesn't work. Yeah.


grjte [16:49] Yes. Right. You don't have to decide to pull it offline beforehand, like you do with Google Docs. It just works. But you also don't lose the benefits of using the cloud. So you can still collaborate with other people in a way that's just seamless and just works.


Nicolas Mohnblatt [17:04] So local first, cloud-second, I guess, rather than cloud-first and local-after?


grjte [17:09] Right. Yeah. They say you own your data, in spite of the cloud, I think is how they sort of subtitle the essay.


So it doesn't go away, but it's no longer the priority. The priority is the user having ownership and control over their data. And they had a final piece that was about -- they called it The Long Now, which is even when the wonderful journey of the software application ends and it becomes defunct, you can still use your data, you can still continue using that software.


So back when we had desktop applications, and I mean, we still have them, but back in the 90s, earlier, before the big boom of all the software being in the cloud, you could, in theory, just keep running these things in an emulator forever.


And so, you can then keep using your data forever. And now, we sort of have this era where you actually can't really as a company shuts down, and even your data is just not that useful anymore. So local first is about tackling a lot of these things.


Goblin Oats [18:05] I will say that local first does have an ideological thread through it. Sort of anecdotally, I've noticed a lot of people either come from blockchain or come from DWeb. So both are, in my opinion, quite ideological projects.


Anna Rose [18:19] It's funny because I don't know what the exact dates are for when things move to the cloud. I was very resistant, for example, MP3s. And I was raised on the Internet during the downloading era. So owning your MP3s that were ripped off. Legally downloaded, but owning them mattered.


And I remember Spotify, or streaming Apple Music, all this stuff coming out and just being like, no, no, no, I refuse. I refused for a long time, because I just had this sense of, like, no, I want to keep it.


But eventually, the market sold it to me. The things I really wanted to access, and they were only available to stream. Maybe Spotify, maybe YouTube, like obscure music was no longer on the Napster. I mean, those were all gone, basically.


So I just wonder, why did we all move? Didn't we move because it was more efficient, you could collaborate, I guess you could share easier? What was the reason we switched that way in the first place?


Goblin Oats [19:18] It has to do with, I think, the physics of the architecture. So the way the web was constructed, I think about it in layers. So you have layer -- maybe the base layer of the Internet where you have HTTP protocol and all these different protocols where it was quite free for people to connect with each other.


Then in order to get sort of Web2 functionality, where you have this write feature, there was really no way for that to be done at the time without bringing everybody into a server.


So there's this meme where a little cartoon man is at a house and saying, hey, if we go into that big building, we can all reach each other much easier. And so, then they all go into the building. And then the little man comes out and says, hey, I built something in my house, can you -- let's all take a look really quick. But then the giant building has iron doors come down, and a sign being like, welcome to Facebook.


Anna Rose [20:18] So it's because it almost started to mimic, or it's like it made use of the structure of just the way the Internet was built, and the sort of server-client model.


And was it sort of because there was this focus on making certain parts more efficient? Was it more -- was it faster, was it more efficient? Was there any sort of tangible benefit to the user that they noticed?


grjte [20:40] I think one of the big keys here is the collaboration aspect.


Anna Rose [20:45] Okay.


grjte [20:45] And this is part of why in the local first essay they say collaboration still has to be there. Because all of those other things were there before.


Anna Rose [20:52] True.


grjte [20:52] But if we were collaborating on a write-up, or an essay, I write it and then I send the file over to you, and you update it, and you rename it, and send it back to me, and I update it and rename it. We've all seen this where you've got like version two --


Anna Rose [21:07] Version.


grjte [21:07] Final, final, ready for publication. So once you are in the cloud, you can start actually sharing things in a way that's not so brutal and hard to keep track of. You just share a link and everybody goes and does their edits and it's fine.


And I think that's just one example of how centralized infrastructure made things much easier. It was much easier for developers to build applications that provided those sorts of experiences, and we didn't have some of the technologies that could make those things easier without having the data all live in a central place.


So one of the key underlying technologies for local first are CRDTs, that stands for Conflict-free Replicated Data Type. And the paper for those -- I think those were first formalized in 2011. They're really new, and that has opened up a lot of possibilities around local first.


Anna Rose [22:04] Interesting. I mean, this sounds really cool. The idea that like, okay, the thing that we have been able to do in the cloud, collaborate, can now be done without somehow touching the cloud, or having the data with us.


But that idea of collaborating with, I don't know, three people in the same room kind of makes sense. But how do you then start sharing data across huge distances without having that central server? And wouldn't you end up with crazy version issues? This is like -- I constantly, I'm like --


Nicolas Mohnblatt [22:35] Oh, that's the right way.


Anna Rose [22:35] A Google Doc, there you can kind of see and it's happening in real time. But if you're like one to one, is it possible to keep sort of that real timeness?


grjte [22:46] This is the thing that's kind of magical about CRDTs is they are data structures that know how to merge themselves.


So you have one version and I have a different version. And whenever I get your version, it knows how to merge any changes. And when you get my version, your local data knows how to merge those changes. It's how the CRDT works.


And because of that, I can just keep moving forward. We have what's called eventual consistency. So over time, we will get to the same place, and it's guaranteed that we will get to the same place. So your data will never be in conflict with the sort of real canonical version. It just might be out of date, and same thing on my side.


Anna Rose [23:29] But what if you're deleting huge passages? What if you're just like, you take a big chunk out. Does that update on your site as deleted? Does it update as conflict, because you haven't deleted it? I know it's very specific example, but --


grjte [23:42] No. It's a good example. So the way that these things work, you have two types of CRDTs, really. You've got state-based, which is -- the best example of state-based is a counter. So I'm just counting 1, 2, 3, 4, and you're counting, and I'll send my counter value to you. And we're trying to keep a global counter between us of every time we do something.


I send my value to you, and you're going to take the maximum of my value and your value and add one. And you send it back to me, and I do the same thing. And so, we'll always either be in sync or you're behind, but we'll get to the same place that way. And that's an example of a state-based CRDT.


You can also have op-based CRDTs where you just send operations over. So I'll say, I added a character, I removed a character, I added five characters, I removed a different character. All of those operations go over to you.


And then the way that you think about it in terms of what's actually happening is we have a grow-only set. So you have a set of operations and you're just always adding operations to it. And then, you have to decide what order you apply those operations in.


So on your side, you just have a bunch of operations, and you're just going to apply them in the order that the CRDT tells you is the correct order to apply them in. And I'm doing the same thing. And the way that that order is determined is basically the rule of how the data gets merged.


And so, you would do something like saying, this operation depends on these previous two operations. If those haven't been merged in yet, this one can't go. So that I think hopefully answers the question of how you can remove data, and still reconcile everything.


Anna Rose [25:14] But what would it actually look like? Just going back to that example. So I delete a paragraph, we're working on the same document, but I'm offline, and then I go back online. You've potentially edited that paragraph. You didn't know that I was going to delete it. Do you end up with a picture of both things, and then we have to make a decision?


grjte [25:34] We don't have to make a decision between us. The data can make the decision itself. However, one nice thing about CRDTs, I think Martin Kleppmann described them as version control for data objects is you can actually see the history. So if you wanted to look back at the history and make a different decision, you could do that.


Anna Rose [25:53] Okay.


grjte [25:53] What would happen basically is if my edits are built off of a different previous operation than yours, one or the other might supersede, and it would just merge that way. If we didn't like the way it happened, we could kind of rewind.


You can think about it as offering some form of git version control that developers get over software, but for everything.


Anna Rose [26:15] Interesting.


Goblin Oats [26:16] I think just to maybe help visualize it, it's a delete operation. So you just tag on the delete operation. But all operations have a causal history. So you would want your delete to obviously happen after the insert. That kind of -- because the insert and the delete are causally, they have a causal relationship. So that it kind of looks like this graph structure, like branches, almost like quantum physics. Each life is splitting and merging.


Anna Rose [26:44] I mean, that's really -- this is a cool kind of just how the collaborative tool works. But how does the connection work? Are you still using a cloud server somewhere? Is there still -- is it just sort of like you keep it, but you're constantly sending the full thing somewhere that's being combined, or is it direct to the other user?


Goblin Oats [27:02] I mean, that's where things get really interesting because you say, oh well, we have this CRDT object. It has these properties. There's cryptography involved, actually, like hashing in production, or more modern CRDT systems.


But then you build these things around it that allow them to connect to each other and form almost like a protocol. So you have nodes, like a sync node, where all of the state lives and helps to relay between different peers and help peers discover each other.


And then you have, the peers are running maybe clients on a web browser or something, and all of a sudden you start to get back into like, hey, I've seen this before. This looks kind of familiar. This is interesting.


Anna Rose [27:42] Interesting.


Nicolas Mohnblatt [27:44] Yes. How do we avoid this sync node becoming sort of a server?


grjte [27:48] Well, you don't is the point. The whole idea with the local first thing is you have your data, you have agency, but we don't have to give up the cloud. It's fine to use the cloud. There are lots of benefits to it as long as you don't lose out on having your data because of the cloud.


So you think of the sync server as being an always online peer. So we're all peers. The sync server is the always online peer. I sync to there when I'm on my laptop, when I'm on my phone, it updates from there. And if you want to do it without that, you can, but we're not specifically trying to avoid that. We're trying to avoid lock in.


Anna Rose [28:20] Yeah.


Goblin Oats [28:21] Yeah. You have credible exit from the system because the data lives locally on your device.


Nicolas Mohnblatt [28:26] I see.


Goblin Oats [28:27] And newer systems now involve encryption, so the sync node actually doesn't even have visibility into the data. It just acts like a dumb operator. It's just moving blocks between each other. So everything is fully shielded.


Anna Rose [28:39] Who runs the node? Who's hosting that?


Goblin Oats [28:41] Tonk.


Anna Rose [28:42] Tonk. Only Tonk? Tonk hosts all the nodes, all the sync nodes? Not centralized?


Goblin Oats [28:50] It's all Tonk, just like I said, all the way down.


Anna Rose [28:52] Okay. Okay.


Goblin Oats [28:53] No. I mean, this is where grjte has noticed so many overlaps between the blockchain space and what's happening, how local first is evolving because, I mean, you have node operators, sync node operators, and lots of different companies are building sync technology. So Tonk is one of them. We're building a kind of design, but we're doing that in tandem with other partners.


So Automerge has its own technology, and Automerge is the library that's maintained by Ink & Switch, who kind of started the whole local first stuff. There's others as well.


Nicolas Mohnblatt [29:28] So Automerge is a library for these CRDTs and running sync nodes. Is that correct?


Goblin Oats [29:34] Yeah.


Nicolas Mohnblatt [29:35] Okay. Cool.


Goblin Oats [29:35] We're building this in tandem with other people. There's an ecosystem, there's a lot of different technologies. I think it's pretty early days. So maybe, if I were to use a metaphor, it's like everyone's building their own L1 right now.


Anna Rose [29:51] Oh, wow. That era, 2017.


grjte [29:53] Yeah. One of the things that I specifically explored with my recent project Groundmist was looking at this idea that with sync servers, every application is sort of picking its own specific sync server. You maybe pick a sync engine provider to do it for you, but then you just sync all the data for your application through it.


And I was thinking, well, then you have the data, it's sort of local, but actually if it's in the browser, then you can't use it in other places, so you still don't get interoperability over your own data.


And I flipped it and said, what if you do a personal sync server, and all of the data that you have access to syncs through a sync server that only you can access, as opposed to the application managing the sync server? And this is the thing that Goblin had independently done at nearly the same time with Tonk that they were exploring. 


So I think there are those sort of two patterns that you can think about. There's also the idea that you have a sync server that lots of applications fire lots of data through, and it just doesn't matter. So it hasn't really been settled yet. People are figuring out how to do the sync efficiently.


And the question of who exactly it's going to be, I think the L1 analogy is really good for that. We just don't exactly know what people are going to settle on.


Anna Rose [31:10] Does the local first community, are they thinking about how to incentivize sync node operators, or is that way too much blockchain thinking for that community at this point?


I realize I'm obviously coming from a perspective where that question comes up really quickly, but at the moment, it sounds kind of altruistic. The personal sync node makes total sense to just do it yourself. That's like your own server. It's like you're running your own cloud.


But if you are doing something more network-y, and there's external people doing it, is that part of the conversation?


grjte [31:44] No. People will -- there are companies that provide sync services, and an application developer will just pick that.


And you basically, instead of paying for some database backend, or running a database yourself, because it's a local first architecture, and you don't need a database. What you need instead is sync. So you just pay for the sync service. So that is currently the way that most things go. And you're not trying to incentivize any sort of greater collaborative thing.


Nicolas Mohnblatt [32:12] You've mentioned previously interoperability and this notion of should I have a personal server that all my apps use, or a per app server that will then, I guess, break my data into apps? Are those the only two solutions, or is there sort of a spectrum there, a kind of trade-off landscape that we can explore?


grjte [32:29] I have thought about this quite a bit, because one of my conclusions after doing this personal sync server as part of my explorations is that it's not really practical. It's a hard thing to bootstrap.


You have to get every application to buy in to sending the data to the sync servers. You have to get all the people to set up their own sync server, or you have to have something that provides these. It's hard to think about doing that in a general way that lots of applications buy in on.


It makes more sense -- it's probably worth having Goblin talk about their approach after. But my takeaway was sort of this is not an easy part of the movement to push. It's a little bit upstream against the grain. It makes more sense to think about the generalized sync model or even app specific.


So then you still have this idea that you should be able to have all the data on your device on all of your devices. And the next thing I've thought about from there is, you probably want some layer that you could have on your device that gives you a way to bring this big data back together. So it would be a more local interoperability layer.


There were a few talks about this at the recent Local First Conference. A few people are thinking about this interoperability issue and recognizing that it is not solved. The full sort of vision of agency and control over data is not there yet because of this.


One person proposed that all applications should let you export your data to very standard formats, like markdown or they're working on a new open canvas standard that people should use, or things that are just very Lindy so that you can always use it somewhere else. So that's one approach.


Anna Rose [34:03] Interesting. How technical -- like today and what you've described, what stage is it? Is it at a stage that people are already experimenting with it, or is it just theoretical? Is it ideas of how to do it, or are people doing it?


grjte [34:16] No. People are doing it.


Anna Rose [34:17] How technical do you have to be to participate at this point?


grjte [34:20] You don't.


Anna Rose [34:21] Really?


grjte [34:21] I mean, you have to -- if you build applications, you need to -- or start vibe coding things, but in order to use the technologies, they're there. They're ready. There are libraries.


Anna Rose [34:32] Oh, nice. But you have to be a dev. It's not the end user yet. It's not like Google user wants to coordinate on a doc.


grjte [34:39] Yeah. I think this is a perfect handoff to Tonk.


Goblin Oats [34:42] Yeah. Yeah. Tonk now allows anybody to participate in the joys of local first dev.


Anna Rose [34:48] Oh, cool.


Goblin Oats [34:49] And I mean, yeah, I guess this is a good segue into what we're building. The basic pitch for the product that Tonk has is you can build your own personalized software that's useful to you. Anybody can do that now. And dashboards, CRMs, fun little games for you and your friends.


And the reason why you can do that partially is that with this sync engine architecture, because you don't have to care about it, you don't have to look at it, you don't have to deal anything. You just send the data into the CRDT object locally. And then it's magically synced and collaboration and everything kind of moves around, that's all taken care of by Tonk Services.


All you have to do is think about the application logic. And guess what? There is these things called coding agents now, and they're really good at handling application logic. And so, you can build local first apps with English, with just natural language now.


Anna Rose [35:42] Cool. Is that the product that you had hinted at earlier?


Goblin Oats [35:46] Yeah. Yeah. Yeah, that's --


Anna Rose [35:48] Very nice.


Goblin Oats [35:49] That's what we're doing.


Nicolas Mohnblatt [35:50] grjte mentioned that Tonk has an interesting approach to interoperability between apps that are sort of living between different personal sync servers. Can you tell us more about it?


Goblin Oats [35:59] Yeah. So, I mean, the architecture is still pretty early, and obviously, we're just building this stuff as we go. So it's all very alpha-build level.


But I mean, the TLDR is that we want this interoperable data nirvana. Data goes wherever it needs to go for humans and for agents, and that's awesome. And the application layer is something that kind of becomes hallucinated. It's very malleable, it's ephemeral, it's on the fly.


And so, the way we think about a lot of interoperability is that you have data living in all of these different places, and it kind of combines together on the moment just in time to create a kind of application experience.


Anna Rose [36:43] Are you bringing though then LLM stuff into the way that data structure is working, or is this more like you build an application that just taps into that local first architecture?


I'm just trying to picture is an AI, for example, collating a collaboration together somehow? Is it making any of those decisions?


Goblin Oats [37:04] It's such a good question because I kind of think that in not-so-long future, the agents are going to be all over the place. There's not going to be any area of the stack where there's not some kind of agentic behavior. 


And when you're thinking about the data structure level, there is this schema problem. How do you translate between different schemas? How do you recognize that maybe this is a phone number underscore, this is a phone number camel case? Different representations of what these fields are, what this data means, but it's fundamentally the same data. LLMs could be useful there.


So it's not in the product as it stands, but the way the product is, is really just like helps you vibe code.


Nicolas Mohnblatt [37:49] How does the product integrate with existing AI tools and existing AI interoperability tools?


Goblin Oats [37:55] So we just make it really easy for vibe coding agents to understand our stack by giving them a lot of instructions. We've written a big old manual in robot speak. And then when you ask the agent to do something, it just knows, it reads the whole project. It knows how to use all of our different tools. So you can just talk to the agent and it will figure it out for you


In the interoperability layer, I think that's more experimental. So different applications can look at the same data. So we've done a lot of experiments with oh, I have maybe Tonk documents, and I want to surface those Tonk documents just in a kind of typical Notion doc or Obsidian doc view.


But then I also want like a ChatGPT view into the Tonk documents where it's ragged and I can query them. Or maybe I want to have a dashboard view which is only pulling some subset of the Tonk documents which have more structured data inside of them.


So that's how interoperability works currently, doing something between different groups of people. So if I wanted to collaborate with grjte or collaborate with ZK Hack, I think that's really cool and really exciting. But we just don't really know how to do it at the moment yet.


Anna Rose [39:11] The project that you worked on, grjte, the Groundmist, you had just talked about it. You kind of introduced what the focus was. But was any of that used then in Tonk, or was it sort of you did an exploration, but found that to set it up this way didn't seem like it would be feasible on a large scale?


grjte [39:31] Yeah. So the project was a series of kind of three experiments all around this idea of being able to have my own data lake for my personal data, or not just personal, but data I have access to, that I could always interoperate over. And having that move smoothly between private, public or shared.


So if you think about something like Obsidian, you have lots of local documents. If you want to publish them, if you use Obsidian's Publish, it sort of wraps everything up and provides you with a website that you publish on GitHub Pages.


And now you've got some of your data that is public, some subset, you were able to make it public, but it's just in its own little walled spot where it's public, and you can't mix that public data with other public data that you have very easily.


And so, I experimented with combining local first with the AT protocol because they have this idea of personal data stores. And so you could have your public data be there where it's all just the data, it's very interoperable.


And I was looking at how you could move between these spaces of this global public data that's yours and your private local first public data that's yours. So that was one of the explorations, was trying to do that.


And then I was thinking about how you could enable interoperability over all of these different data sets by defining schemas. So I looked at the schema problem and said you could use atproto's system to define schemas using their schema network. And all those schemas could be public, but the data could still be private.


And so you could use this public global schema network that they call Lexicon for local first data that stays local first, and then your stuff could be published and move public and it would be very smooth. Or it could stay local, but you'd know how to understand it from other applications.


And then I said, okay, now you can understand it from all these different applications, but you still have to be able to access it. In order to access it, where do you go for it? And that's where I brought in this personal sync server idea.


So it was sort of a progressive exploration of how you could build this interoperable data lake trying to not build a new protocol to do that. Trying to do very small things that I could make into a React library that somebody could use, just an SDK that people could use.


So that's really what the project was about.


Nicolas Mohnblatt [41:44] Can you give us a quick one sentence intro to what atproto is?


Anna Rose [41:47] Yeah. Exactly. I was thinking that too. We should definitely define it. That's never been talked about on the show before, so it'd be cool to introduce.


grjte [41:54] Okay. Great. Yeah. atproto is the protocol that underlies Bluesky. It's a global protocol for networked public data. It's built around everybody having their own personal data store that contains data repos.


So there's a canonical place where all of the data lives. When data changes happen, it's all signed with your key. Everybody has a key pair. And so you have verifiable, interoperable global data in a network that you can build social applications on top of.


And one of the really cool things is that you can build lots of different views over the data, because the way that you interact with the data is not defined by the data that's stored. That's just raw data. And so, the way that you want to look at it, or show it, or combine it with other data sets is not predefined for you. It makes it very flexible.


Nicolas Mohnblatt [42:46] There's an interesting parallel there right between the sort of Long Now idea of local first of like the data should always exist locally, and you should always be able to use it, and the different ways of displaying the same data in atproto. Almost like a networked Long Now atproto, I guess.


Goblin Oats [43:03] That's pretty cool.


grjte [43:06] Yeah. I think I felt like there were a lot of things that were very shared between these two worlds. And the main thing that wasn't shared is the public nature of everything on the AT Protocol.


Nicolas Mohnblatt [43:16] Right.


Anna Rose [43:17] The work from that work though, because you kind of described these steps in what you described, Goblin Oats, the Tonk project, what parts is it touching on from there? Is there kind of a point where there's a merging of some of that work into what exists today as that product? Or was it more an independent project and then you guys just found out you were thinking about the same things?


Goblin Oats [43:41] Yeah. Literally the second thing.


Anna Rose [43:42] Okay. The second thing. Okay. Okay. So in Tonk, does it also touch AT Protocol? Does it explore that?


Goblin Oats [43:50] No. No. At the moment, it's more self contained, but it's something that we're definitely thinking about. I think there's this language, you have small worlds, big worlds. atprotto is kind of big worlds. Personal server, local first stuff is kind of small world.


How do those two connect to each other? Actually, that gets into some of the interesting stuff around ZK, and the more advanced cryptography about how you can connect these two things together. So maybe that's a nice segue into that as well.


Nicolas Mohnblatt [44:20] Yeah. This is something I wanted to bring up because in conversation with actually both of you individually, you've both told me there's this local first thing, there's all this cryptography thing, and there has to be some overlap, and I can feel that it's there, and I really want to flesh it out and make people see that there's something there.


So has that changed? Do you guys now see what it is and have a quick pitch for it?


grjte [44:42] Yeah. So I think one way that you can think about this is in terms of maturation of the space and of the architecture. I was talking to Brooklyn Zelenka, who does a lot of work on access control and authorization. She built this great -- or she's actively working on this great project called Keyhive, which is originally going to be tied to Automerge for authorization.


Well, they're building it so that it won't be specifically tied to any CRDT library. It will go at a lower layer, but it will work with Automerge.


And she was saying that local first is really having its shift from the surprise party level of adversarial environment to corporate espionage. That's sort of where it's at right now.


Nicolas Mohnblatt [45:23] I'm not sure I understand that shift.


Anna Rose [45:25] What do both of those mean?


grjte [45:27] Okay. So I guess the surprise party is just like, it's Anna's birthday, we're going to throw a party. We hope she doesn't find out. But if she does, it's not like a huge deal. The corporate espionage is like, okay, my lawyer is talking to your lawyer. We're coming to a deal. And if you find out some of our information, we lose a lot of money. It's a bigger deal.


Anna Rose [45:44] Yeah. But like no one dies.


grjte [45:47] No one dies.


Anna Rose [45:48] Yeah. Okay.


grjte [45:48] Right. But it's not great. And I'd be embarrassed. Or Nico would be embarrassed because clearly I'd be the one discovering his secret information.


Anna Rose [45:55] I see.


grjte [45:57] So that's kind of one way to think about these things. And that's reflected in the progress of access control and the way that people are looking at exploring sync over end-to-end encrypted data.


I think another thing that I think about in the way that blockchain has shifted and the way that this has shifted now is that originally with blockchain, you had all nodes have all the same data and execute the same thing every time.


And then, we have this shift to, well, actually, let's do a ZK proof, and everybody else can just verify things, and we don't have to put all the data onchain, and we don't have to have all of this re-execution.


And in local first, you can think about cases where currently in these op-based CRDTs that I talked about, I send all the ops that I do, Anna, you send all the ops that you do, and I apply every op. And we later invite Nico to our document, and he gets the entire history of all the ops and he replays them one by one to get up to where the document is.


There's a lot of inefficiency there. And for Nico, first of all, maybe we don't want him to see the history. Maybe we just want him to pick up from, we've got a nice doc now and we don't want him to see earlier changes. So that would be nice to hide that.


Second of all, maybe he doesn't want to see all the history. Actually, he's just reading the latest messages in a chat. He doesn't need all of it. He just wants to start from a snapshot that's verifiable, and then continue forward.


So there's this parallel of this stuff is not there yet, and it would be really great to have that. And so, that's one sort of example where you could see all of the ZK work that we've done would be really useful over here in this space as well.


Anna Rose [47:28] That's cool.


grjte [47:28] I'm sure Goblin has more examples as well.


Goblin Oats [47:32] Yeah. Well, I mean, I think I felt really struck by lightning when you had told me, hey, wait a second, we could just use blockchain metaphors for everything. I don't know why I missed that. But you really see it everywhere, and I think it's scaling problems.


So ZK and a lot of this cryptography is used to scale blockchains, and you can think about it in the same way. So history compaction is a good example of scaling because for certain types of data in particular, the history can get really big really fast. And you're going to want to maybe have an archive node, but then compact that for a lot of other people who don't need to necessarily see the entire history.


And then the other thing is adversarial environments. So I mentioned a little bit about, oh, it'd be really cool if we could all share our data and kind of have this collective CRDT. But maybe I want to share with somebody. I don't know everything about them, I don't know what they're going to do. So I only kind of partially trust them.


And these semi-trusted environments are pretty common, and it's an area where CRDTs struggle because they can be abused in different ways. So even if you have, let's say, hashing and you can check the entire chain of history, oh yeah, this looks right, you can't check data inside of that.


So I could zero out the account balance or something, and here that's where you kind of get into, oh, data validation. That's interesting. Oh, how do we do that? Oh, okay. Proof of valid state transition. Hey, that sounds familiar.


Nicolas Mohnblatt [49:01] Yeah.


Anna Rose [49:01] Interesting.


Nicolas Mohnblatt [49:02] Been there.


Anna Rose [49:03] So you're using though in this case like the ZK side of things for mostly verification of state. It's like it's a sort of proving a truth. You're not using it for any sort of privacy like add-on. Are you -- or is there a way that you're also exploring it for privacy?


Goblin Oats [49:19] Okay. Maybe I've forgotten. There's more -- there's so much.


Anna Rose [49:23] Okay. Good.


Goblin Oats [49:23] It's just like, it's everywhere. It's really exciting. I think it'd be great reminder because I'm sort of losing track of all of the -- it's just a giant pile of work. But I mean we were talking to Alex Good, who's one of the core maintainers of Automerge, and was mentioning how in the sync service they encrypt these chunks now.


So it's like, okay, this is good. The data is encrypted, the sync server can't see it. But however they do have to keep around metadata, and there are some three-letter agencies that are pretty interested in metadata. In fact, metadata is almost the most useful thing, so you'd want to hide that.


So how do you sync, how are you able to identify which encrypted chunks you need to pull down that are yours, that you have a valid key for? This is really common in a lot of these blockchains that work on shielding. It's a pretty common use case in a lot of different private blockchain scenarios. So that's a private case.  And then also for reputation, I should say.


So pulling in outside or external reputation and using it inside of a CRDT system requires that you do some kind of reputation transfer. You may want to do that in a way with selective disclosure, in particular, when you're dealing with agents, which kind of gets us into this weird even going further into the future.


Agents really need that quite bad because they're going out, doing things on behalf of you and talking to other agents. They're kind of dumb. You don't want to give them access to all your information all the time. You just want to give it kind of on a need-to-know basis. And so, ZK can be really powerful there as well if agents are reading from these sync stores and taking action.


Anna Rose [51:05] So it ties in the whole ID case we've been covering actually for a while here.


Goblin Oats [51:09] 100%.


Anna Rose [51:09] That's so interesting.


Goblin Oats [51:10] I know.


Anna Rose [51:11] Is there any other types of cool-edge cryptography that's being explored as well?


grjte [51:16] Yes. A few people are starting to explore these things. So there are some papers about doing MPC with CRDTs, and somebody actually just did a project exploring homomorphic encryption for a CRDT. And it's a really nice write-up. His name was Jake Lazaroff.


He basically was like, I really thought that these would fit together well, and actually it doesn't fit together well because for homomorphic encryption, you have to do the worst case path, and the overhead is just absolutely enormous.


I think the amount of time it took to do the sync was 2 million times as long as doing the sync without homomorphic encryption.


But you could think about maybe using it for some metadata, instead of trying to use it for the entire CRDT. And I also do think it's really interesting to think about these paths, especially maybe with MPC.


Goblin, you looked excited when Anna said that too. So maybe you have a different idea from what I'm saying.


Goblin Oats [52:08] Oh, no. You were the one who gave me the idea about Wi-Fi Aware. You should talk about the Wi-Fi Aware idea. It's so cool. I mean it's more experimental, but it's a really cool idea, I think.


grjte [52:17] Yeah. I've been doing a lot of just brainstorming --


Anna Rose [52:19] I love it.


grjte [52:19] What are sort of weird and out there things, because -- just to try to think in different ways. And Wi-Fi Aware is this really cool change that happened. Well, there is a cool change that happened recently where the EU is forcing Apple to be able to connect directly to other devices, even if they're not Apple devices.


So currently you can airdrop between Apple devices, but not from Apple to Android. But now, actually, they're going to have to do that. So Wi-Fi Aware is the standard that Android devices have been using since Android 8 for this, and now Apple in the next versions of iOS and iPadOS is going to be compatible with Wi-Fi Aware.


So now you could just connect directly a whole bunch of devices in place. And the other thing about it is that these devices are still connected to the Internet. So you can have your little Local Area Network with all of your friends without any of them having to lose their main Internet connection. It's high throughput.


And then we were thinking, well, could you do some fun local first MPC thing with that? Thinking about some of the experiments that Cursive did around this kind of stuff, and just feeling like there's some fun space for social applications around that.


I haven't thought of a great one yet, so hopefully somebody will.


Anna Rose [53:32] Cool.


Nicolas Mohnblatt [53:33] It sounds like the dream setup for MPC, right? Because you have a local network that's super fast, that's set up almost instantly, and you have just a few participants and private shared state. It sounds perfect for MPC.


Goblin Oats [53:46] Yeah.


grjte [53:46] Yes.


Goblin Oats [53:47] 100%.


Anna Rose [53:48] Just going back to kind of how -- I'd ask how technical do you have to be to use it? Can one use it already? Is there a big difference when you're using these kind of new rail -- I guess sound sort of new rails, a new architecture. Is it slower now? When you're using a lot of this stuff, would a user notice any performance change?


grjte [54:10] So yes. I think you would notice a performance change, and what you would notice is that it's faster.


Anna Rose [54:14] Oh, cool.


grjte [54:14] Because local first really optimizes for low latency as close to zero as possible. That's basically the whole point of having all of the data there.


And so, a really nice thing about this is that we've got this architecture that enables better user ownership, agency control, privacy, and the UX is better. So you don't have to try to sell people on privacy. You could just try to sell them on better UX, which maybe that gives us a better chance than we've had with some of these things in the past.


Anna Rose [54:43] That's cool. I didn't expect that to be the answer. When you're combining it though, if you were doing those snapshots or SNARKs or anything like that, I know these sound like they're still somewhat theoretical.  They're those -- aren't necessarily in practice. But would those add any sort of slowness, or are we at a point where the SNARK creation is so good that we-- where we got it?


grjte [55:06] Yeah. They're not in practice yet, because they're too slow. I think local first has really been focused on lots of people who know each other and trust each other collaborating, and it's really great at that. And it is not fully ready for more adversarial environments.


And local first thinks about in a browser on mobile as the fundamental thing that you need to be able to support always. So that's really worst case for doing SNARKs, and that's the next thing that we would need to try to tackle is doing that in a way that works well with CRDTs and sync engines.


Anna Rose [55:40] Cool. But we are getting there. There is work on that. So that's cool.


Goblin Oats [55:43] Yeah. I think, even as the tooling is getting better, there is low-hanging fruit. So the sync server itself might be able to do certain things if we're just thinking about metadata and doing like a oblivious transfer or something like that.


I mean, there are protocols that are pretty well worn that I think can already be brought in to local first. If I think about also zkTLS, or some of these identity things, that feels kind of ready to me, honestly, to be used, because all you need to do is just bring in a credential once, and then it's kind of ready to go, so.


Anna Rose [56:19] Cool. Nico, did you just get triggered by zkTLS?


Nicolas Mohnblatt [56:22] No. That's all right. I can live with it.


Anna Rose [56:24] Okay.


Goblin Oats [56:24] Okay. Maybe I should -- did I say -- I shouldn't have said the word?


Anna Rose [56:27] MPC TLS. It's just because it's not always ZK, I feel like people in that space have --


Goblin Oats [56:32] Yeah.


Nicolas Mohnblatt [56:33] I have to bring up a question which I'm kind of ashamed I'm bringing up, but when you're writing local first software, as a developer, what is your path to monetization? I feel like we've seen you can pay to access content, you can pay for a subscription, and you're locked into the subscription because you have platform lock in.


What happens when we go to local first, and how do we reward good software being written?


Goblin Oats [56:59] Yeah. Well, there's two answers to this. So the first answer is maybe the old school answer, which is that you kind of use the same economic models that have been in software for a long time. You can even do subscription based if you wanted. You pay for subscriptions in iPhone applications.


So it's not a totally wild concept that you tell people to give you a monthly fee to get the latest updates of the app or something like that.


The other, the kind of more new one is actually a vision that comes from someone called Maggie Appleton, which is about these like barefoot devs. It's the one that I'm the most excited about, which is that, it's so cheap to produce software, and it's so cheap to host it, that you can actually now have software applications in the wild that don't really need an economic model.


So the one that I really want is family social media. I want a chat group with my family, but that it's rich and it is more async, it has a feed. Not everyone wants this, but my family wants it, and I could build this for my family relatively quickly, and we could all use it together.


So you get this almost what YouTube did for content, vibe coding, and these new rails will do for software.


Anna Rose [58:18] Cool. So we're almost at time, but I'm really curious like what are the research areas, projects, directions that you're exploring now? What else is on the sort of local first roadmap?


grjte [58:30] There are a couple of projects that I find really interesting and exciting and they're part of why in my Groundmist project, I chose to use Automerge. And those are Keyhive, which is an authorization and access control project for local first that uses capabilities-based access control but applying it to the CRDT setting.


And then Beelay, which sort of accompanies Keyhive, but it addresses the problem of now all your data is encrypted, how do you sync it efficiently? So it's looking at end-to-end encrypted sync.


And I think those are very interesting projects and there are a lot of problems that come up in those. They're trying to do something that's very ready now, that can be used as soon as possible, but there are lots of ways that things could be optimized. Or for example, the access control graph is public, currently, in this configuration, and maybe you'd like to find a way to hide that.


So I think there are lots of interesting cryptographic questions just around those two projects that I'm looking at more, and I think it would be great if other people wanted to look at those too.


Anna Rose [59:29] Cool.


Goblin Oats [59:30] Yeah. The projects are open, you can go in, you can put in issues, and I know for a fact that the maintainers are very interested to explore these things. So definitely get stuck in.


Anna Rose [59:40] Nice. What about you, Goblin Oats? Any other areas that are piquing your interest?


Goblin Oats [59:45] Well, we're looking at a lot of agentic behavior. and I guess I'll just tease, there's auth problems with agents, big auth problems. And so, that's something that we're going to be looking at quite a bit, and maybe would make for its own episode even, who knows?


Anna Rose [01:00:01] Maybe. That sounds cool.


Goblin Oats [01:00:02] I mean, there's so much. It's a really rich space.


Anna Rose [01:00:03] We, like on the show, Tarun and I had Kostas from Sui, and we talked about this concept of zkAt, so ZK authentication, and it's about access control. And it was funny because Tarun's line of questioning was all about agents and access control.


And it hadn't been fully figured out yet, but it was very interesting to sort of -- I don't know, sort of brainstorm what happens when you have all of these agents using things, agents like needing access, losing access, potentially having the ability to add access, like what tier? Yeah. There's a lot of things to think about there.


Goblin Oats [01:00:41] Yeah. Super rich space.


Nicolas Mohnblatt [01:00:42] Access control has always been, and I think will remain super messy to implement and to think about properly. And this is why capabilities-based models are interesting, like grjte mentioned. But yeah, it's still super hard. It's a cool problem to get deep into.


Anna Rose [01:00:57] Nice. All right. Thank you both for this great journey into a brand-new space for us, at least for me on this show. The local first world, the work you've been doing at Tonk and on Groundmist. And yeah, grjte, we had a conversation, what is it, four months ago? And it was about sort of the preliminaries of this work. And it's really cool to hear what you found. I think it's such a cool space. So, yeah. Thanks so much.


grjte [01:01:25] Thanks a lot. It's really great to be here on the podcast, and to talk about this stuff, and I hope people will get in touch if they're interested, because I'd really love to see more people looking at these problems.


Goblin Oats [01:01:36] Yeah. Thanks, Anna. Yeah. 100%, feel free to reach out. It's just Goblin Oats everywhere. So pretty good SEO.


Anna Rose [01:01:41] Pretty easy.


grjte [01:01:42] And I'm grjte everywhere.


Anna Rose [01:01:44] Very cool. Thanks, Nico.


Nicolas Mohnblatt [01:01:46] Thank you. And thank you in particular, grjte, for a quote that I think I'll be reusing, which is, I thought I cared about privacy, but actually what I want is autonomy and agency.


Anna Rose [01:01:56] Cool. So I want to say thank you to the podcast team, Rachel, Henrik, Tanya and Kai. And to our listeners, thanks for listening.